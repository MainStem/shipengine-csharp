/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// BrightpearlAccountInformationRequest
    /// </summary>
    [DataContract]
    public partial class BrightpearlAccountInformationRequest :  IEquatable<BrightpearlAccountInformationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrightpearlAccountInformationRequest" /> class.
        /// </summary>
        /// <param name="userName">userName.</param>
        /// <param name="storeName">storeName.</param>
        /// <param name="integrationUrl">integrationUrl.</param>
        /// <param name="password">password.</param>
        /// <param name="settings">settings.</param>
        public BrightpearlAccountInformationRequest(string userName = default(string), string storeName = default(string), string integrationUrl = default(string), string password = default(string), BrightpearlAccountSettingsRequest settings = default(BrightpearlAccountSettingsRequest))
        {
            this.UserName = userName;
            this.StoreName = storeName;
            this.IntegrationUrl = integrationUrl;
            this.Password = password;
            this.Settings = settings;
        }
        
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets StoreName
        /// </summary>
        [DataMember(Name="store_name", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationUrl
        /// </summary>
        [DataMember(Name="integration_url", EmitDefaultValue=false)]
        public string IntegrationUrl { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public BrightpearlAccountSettingsRequest Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrightpearlAccountInformationRequest {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  IntegrationUrl: ").Append(IntegrationUrl).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrightpearlAccountInformationRequest);
        }

        /// <summary>
        /// Returns true if BrightpearlAccountInformationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BrightpearlAccountInformationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrightpearlAccountInformationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.IntegrationUrl == input.IntegrationUrl ||
                    (this.IntegrationUrl != null &&
                    this.IntegrationUrl.Equals(input.IntegrationUrl))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.IntegrationUrl != null)
                    hashCode = hashCode * 59 + this.IntegrationUrl.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
