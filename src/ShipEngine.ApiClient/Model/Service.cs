/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Service
    /// </summary>
    [DataContract]
    public class Service : IEquatable<Service>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="carrierId">CarrierId.</param>
        /// <param name="carrierCode">CarrierCode.</param>
        /// <param name="serviceCode">ServiceCode.</param>
        /// <param name="name">Name.</param>
        /// <param name="domestic">Domestic.</param>
        /// <param name="international">International.</param>
        public Service(string carrierId = default(string), string carrierCode = default(string),
            string serviceCode = default(string), string name = default(string), bool? domestic = default(bool?),
            bool? international = default(bool?))
        {
            CarrierId = carrierId;
            CarrierCode = carrierCode;
            ServiceCode = serviceCode;
            Name = name;
            Domestic = domestic;
            International = international;
        }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceCode
        /// </summary>
        [DataMember(Name = "service_code", EmitDefaultValue = false)]
        public string ServiceCode { get; set; }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Domestic
        /// </summary>
        [DataMember(Name = "domestic", EmitDefaultValue = false)]
        public bool? Domestic { get; set; }

        /// <summary>
        ///     Gets or Sets International
        /// </summary>
        [DataMember(Name = "international", EmitDefaultValue = false)]
        public bool? International { get; set; }

        /// <summary>
        ///     Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) &&
                (
                    ServiceCode == other.ServiceCode ||
                    ServiceCode != null &&
                    ServiceCode.Equals(other.ServiceCode)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Domestic == other.Domestic ||
                    Domestic != null &&
                    Domestic.Equals(other.Domestic)
                ) &&
                (
                    International == other.International ||
                    International != null &&
                    International.Equals(other.International)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domestic: ").Append(Domestic).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Service);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (CarrierCode != null)
                {
                    hash = hash * 59 + CarrierCode.GetHashCode();
                }
                if (ServiceCode != null)
                {
                    hash = hash * 59 + ServiceCode.GetHashCode();
                }
                if (Name != null)
                {
                    hash = hash * 59 + Name.GetHashCode();
                }
                if (Domestic != null)
                {
                    hash = hash * 59 + Domestic.GetHashCode();
                }
                if (International != null)
                {
                    hash = hash * 59 + International.GetHashCode();
                }
                return hash;
            }
        }
    }
}