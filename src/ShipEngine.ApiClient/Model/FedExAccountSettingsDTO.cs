/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// FedExAccountSettingsDTO
    /// </summary>
    [DataContract]
    public partial class FedExAccountSettingsDTO :  IEquatable<FedExAccountSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines PickupType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Regularpickup for value: regular_pickup
            /// </summary>
            [EnumMember(Value = "regular_pickup")]
            Regularpickup = 2,
            
            /// <summary>
            /// Enum Requestcourier for value: request_courier
            /// </summary>
            [EnumMember(Value = "request_courier")]
            Requestcourier = 3,
            
            /// <summary>
            /// Enum Dropbox for value: drop_box
            /// </summary>
            [EnumMember(Value = "drop_box")]
            Dropbox = 4,
            
            /// <summary>
            /// Enum Businessservicecenter for value: business_service_center
            /// </summary>
            [EnumMember(Value = "business_service_center")]
            Businessservicecenter = 5,
            
            /// <summary>
            /// Enum Station for value: station
            /// </summary>
            [EnumMember(Value = "station")]
            Station = 6
        }

        /// <summary>
        /// Gets or Sets PickupType
        /// </summary>
        [DataMember(Name="pickup_type", EmitDefaultValue=false)]
        public PickupTypeEnum? PickupType { get; set; }
        /// <summary>
        /// Defines SmartPostHub
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmartPostHubEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Allentownpa for value: allentown_pa
            /// </summary>
            [EnumMember(Value = "allentown_pa")]
            Allentownpa = 2,
            
            /// <summary>
            /// Enum Atlantaga for value: atlanta_ga
            /// </summary>
            [EnumMember(Value = "atlanta_ga")]
            Atlantaga = 3,
            
            /// <summary>
            /// Enum Baltimoremd for value: baltimore_md
            /// </summary>
            [EnumMember(Value = "baltimore_md")]
            Baltimoremd = 4,
            
            /// <summary>
            /// Enum Charlottenc for value: charlotte_nc
            /// </summary>
            [EnumMember(Value = "charlotte_nc")]
            Charlottenc = 5,
            
            /// <summary>
            /// Enum Chinoca for value: chino_ca
            /// </summary>
            [EnumMember(Value = "chino_ca")]
            Chinoca = 6,
            
            /// <summary>
            /// Enum Dallastx for value: dallas_tx
            /// </summary>
            [EnumMember(Value = "dallas_tx")]
            Dallastx = 7,
            
            /// <summary>
            /// Enum Denverco for value: denver_co
            /// </summary>
            [EnumMember(Value = "denver_co")]
            Denverco = 8,
            
            /// <summary>
            /// Enum Detroitmi for value: detroit_mi
            /// </summary>
            [EnumMember(Value = "detroit_mi")]
            Detroitmi = 9,
            
            /// <summary>
            /// Enum Edisonnj for value: edison_nj
            /// </summary>
            [EnumMember(Value = "edison_nj")]
            Edisonnj = 10,
            
            /// <summary>
            /// Enum Grovecityoh for value: grove_city_oh
            /// </summary>
            [EnumMember(Value = "grove_city_oh")]
            Grovecityoh = 11,
            
            /// <summary>
            /// Enum Groveportoh for value: groveport_oh
            /// </summary>
            [EnumMember(Value = "groveport_oh")]
            Groveportoh = 12,
            
            /// <summary>
            /// Enum Houstontx for value: houston_tx
            /// </summary>
            [EnumMember(Value = "houston_tx")]
            Houstontx = 13,
            
            /// <summary>
            /// Enum Indianapolisin for value: indianapolis_in
            /// </summary>
            [EnumMember(Value = "indianapolis_in")]
            Indianapolisin = 14,
            
            /// <summary>
            /// Enum Kansascityks for value: kansas_city_ks
            /// </summary>
            [EnumMember(Value = "kansas_city_ks")]
            Kansascityks = 15,
            
            /// <summary>
            /// Enum Losangelesca for value: los_angeles_ca
            /// </summary>
            [EnumMember(Value = "los_angeles_ca")]
            Losangelesca = 16,
            
            /// <summary>
            /// Enum Martinsburgwv for value: martinsburg_wv
            /// </summary>
            [EnumMember(Value = "martinsburg_wv")]
            Martinsburgwv = 17,
            
            /// <summary>
            /// Enum Memphistn for value: memphis_tn
            /// </summary>
            [EnumMember(Value = "memphis_tn")]
            Memphistn = 18,
            
            /// <summary>
            /// Enum Minneapolismn for value: minneapolis_mn
            /// </summary>
            [EnumMember(Value = "minneapolis_mn")]
            Minneapolismn = 19,
            
            /// <summary>
            /// Enum Newberlinwi for value: new_berlin_wi
            /// </summary>
            [EnumMember(Value = "new_berlin_wi")]
            Newberlinwi = 20,
            
            /// <summary>
            /// Enum Northboroughma for value: northborough_ma
            /// </summary>
            [EnumMember(Value = "northborough_ma")]
            Northboroughma = 21,
            
            /// <summary>
            /// Enum Orlandofl for value: orlando_fl
            /// </summary>
            [EnumMember(Value = "orlando_fl")]
            Orlandofl = 22,
            
            /// <summary>
            /// Enum Phoneixaz for value: phoneix_az
            /// </summary>
            [EnumMember(Value = "phoneix_az")]
            Phoneixaz = 23,
            
            /// <summary>
            /// Enum Pittsburghpa for value: pittsburgh_pa
            /// </summary>
            [EnumMember(Value = "pittsburgh_pa")]
            Pittsburghpa = 24,
            
            /// <summary>
            /// Enum Renonv for value: reno_nv
            /// </summary>
            [EnumMember(Value = "reno_nv")]
            Renonv = 25,
            
            /// <summary>
            /// Enum Sacramentoca for value: sacramento_ca
            /// </summary>
            [EnumMember(Value = "sacramento_ca")]
            Sacramentoca = 26,
            
            /// <summary>
            /// Enum Saltlakecityut for value: salt_lake_city_ut
            /// </summary>
            [EnumMember(Value = "salt_lake_city_ut")]
            Saltlakecityut = 27,
            
            /// <summary>
            /// Enum Seattlewa for value: seattle_wa
            /// </summary>
            [EnumMember(Value = "seattle_wa")]
            Seattlewa = 28,
            
            /// <summary>
            /// Enum Stlouismo for value: st_louis_mo
            /// </summary>
            [EnumMember(Value = "st_louis_mo")]
            Stlouismo = 29,
            
            /// <summary>
            /// Enum Windsorct for value: windsor_ct
            /// </summary>
            [EnumMember(Value = "windsor_ct")]
            Windsorct = 30,
            
            /// <summary>
            /// Enum Newarkny for value: newark_ny
            /// </summary>
            [EnumMember(Value = "newark_ny")]
            Newarkny = 31,
            
            /// <summary>
            /// Enum Southbrunswicknj for value: south_brunswick_nj
            /// </summary>
            [EnumMember(Value = "south_brunswick_nj")]
            Southbrunswicknj = 32,
            
            /// <summary>
            /// Enum Scrantonpa for value: scranton_pa
            /// </summary>
            [EnumMember(Value = "scranton_pa")]
            Scrantonpa = 33,
            
            /// <summary>
            /// Enum Wheelingil for value: wheeling_il
            /// </summary>
            [EnumMember(Value = "wheeling_il")]
            Wheelingil = 34
        }

        /// <summary>
        /// Gets or Sets SmartPostHub
        /// </summary>
        [DataMember(Name="smart_post_hub", EmitDefaultValue=false)]
        public SmartPostHubEnum? SmartPostHub { get; set; }
        /// <summary>
        /// Defines SmartPostEndorsement
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmartPostEndorsementEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Returnservicerequested for value: return_service_requested
            /// </summary>
            [EnumMember(Value = "return_service_requested")]
            Returnservicerequested = 2,
            
            /// <summary>
            /// Enum Forwardingservicerequested for value: forwarding_service_requested
            /// </summary>
            [EnumMember(Value = "forwarding_service_requested")]
            Forwardingservicerequested = 3,
            
            /// <summary>
            /// Enum Addressservicerequested for value: address_service_requested
            /// </summary>
            [EnumMember(Value = "address_service_requested")]
            Addressservicerequested = 4,
            
            /// <summary>
            /// Enum Changeservicerequested for value: change_service_requested
            /// </summary>
            [EnumMember(Value = "change_service_requested")]
            Changeservicerequested = 5,
            
            /// <summary>
            /// Enum Leaveifnoresponse for value: leave_if_no_response
            /// </summary>
            [EnumMember(Value = "leave_if_no_response")]
            Leaveifnoresponse = 6
        }

        /// <summary>
        /// Gets or Sets SmartPostEndorsement
        /// </summary>
        [DataMember(Name="smart_post_endorsement", EmitDefaultValue=false)]
        public SmartPostEndorsementEnum? SmartPostEndorsement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FedExAccountSettingsDTO" /> class.
        /// </summary>
        /// <param name="nickname">nickname.</param>
        /// <param name="pickupType">pickupType.</param>
        /// <param name="smartPostHub">smartPostHub.</param>
        /// <param name="smartPostEndorsement">smartPostEndorsement.</param>
        /// <param name="isPrimaryAccount">isPrimaryAccount.</param>
        public FedExAccountSettingsDTO(string nickname = default(string), PickupTypeEnum? pickupType = default(PickupTypeEnum?), SmartPostHubEnum? smartPostHub = default(SmartPostHubEnum?), SmartPostEndorsementEnum? smartPostEndorsement = default(SmartPostEndorsementEnum?), bool? isPrimaryAccount = default(bool?))
        {
            this.Nickname = nickname;
            this.PickupType = pickupType;
            this.SmartPostHub = smartPostHub;
            this.SmartPostEndorsement = smartPostEndorsement;
            this.IsPrimaryAccount = isPrimaryAccount;
        }
        
        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }




        /// <summary>
        /// Gets or Sets IsPrimaryAccount
        /// </summary>
        [DataMember(Name="is_primary_account", EmitDefaultValue=false)]
        public bool? IsPrimaryAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FedExAccountSettingsDTO {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  PickupType: ").Append(PickupType).Append("\n");
            sb.Append("  SmartPostHub: ").Append(SmartPostHub).Append("\n");
            sb.Append("  SmartPostEndorsement: ").Append(SmartPostEndorsement).Append("\n");
            sb.Append("  IsPrimaryAccount: ").Append(IsPrimaryAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FedExAccountSettingsDTO);
        }

        /// <summary>
        /// Returns true if FedExAccountSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FedExAccountSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FedExAccountSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.PickupType == input.PickupType ||
                    (this.PickupType != null &&
                    this.PickupType.Equals(input.PickupType))
                ) && 
                (
                    this.SmartPostHub == input.SmartPostHub ||
                    (this.SmartPostHub != null &&
                    this.SmartPostHub.Equals(input.SmartPostHub))
                ) && 
                (
                    this.SmartPostEndorsement == input.SmartPostEndorsement ||
                    (this.SmartPostEndorsement != null &&
                    this.SmartPostEndorsement.Equals(input.SmartPostEndorsement))
                ) && 
                (
                    this.IsPrimaryAccount == input.IsPrimaryAccount ||
                    (this.IsPrimaryAccount != null &&
                    this.IsPrimaryAccount.Equals(input.IsPrimaryAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.PickupType != null)
                    hashCode = hashCode * 59 + this.PickupType.GetHashCode();
                if (this.SmartPostHub != null)
                    hashCode = hashCode * 59 + this.SmartPostHub.GetHashCode();
                if (this.SmartPostEndorsement != null)
                    hashCode = hashCode * 59 + this.SmartPostEndorsement.GetHashCode();
                if (this.IsPrimaryAccount != null)
                    hashCode = hashCode * 59 + this.IsPrimaryAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
