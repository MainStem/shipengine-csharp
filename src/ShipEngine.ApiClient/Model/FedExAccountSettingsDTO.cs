/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// FedExAccountSettingsDTO
    /// </summary>
    [DataContract]
    public partial class FedExAccountSettingsDTO :  IEquatable<FedExAccountSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PickupType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupTypeEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Regularpickup for "regular_pickup"
            /// </summary>
            [EnumMember(Value = "regular_pickup")]
            Regularpickup,
            
            /// <summary>
            /// Enum Requestcourier for "request_courier"
            /// </summary>
            [EnumMember(Value = "request_courier")]
            Requestcourier,
            
            /// <summary>
            /// Enum Dropbox for "drop_box"
            /// </summary>
            [EnumMember(Value = "drop_box")]
            Dropbox,
            
            /// <summary>
            /// Enum Businessservicecenter for "business_service_center"
            /// </summary>
            [EnumMember(Value = "business_service_center")]
            Businessservicecenter,
            
            /// <summary>
            /// Enum Station for "station"
            /// </summary>
            [EnumMember(Value = "station")]
            Station
        }

        /// <summary>
        /// Gets or Sets SmartPostHub
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmartPostHubEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Allentownpa for "allentown_pa"
            /// </summary>
            [EnumMember(Value = "allentown_pa")]
            Allentownpa,
            
            /// <summary>
            /// Enum Atlantaga for "atlanta_ga"
            /// </summary>
            [EnumMember(Value = "atlanta_ga")]
            Atlantaga,
            
            /// <summary>
            /// Enum Charlottenc for "charlotte_nc"
            /// </summary>
            [EnumMember(Value = "charlotte_nc")]
            Charlottenc,
            
            /// <summary>
            /// Enum Chinoca for "chino_ca"
            /// </summary>
            [EnumMember(Value = "chino_ca")]
            Chinoca,
            
            /// <summary>
            /// Enum Dallastx for "dallas_tx"
            /// </summary>
            [EnumMember(Value = "dallas_tx")]
            Dallastx,
            
            /// <summary>
            /// Enum Denverco for "denver_co"
            /// </summary>
            [EnumMember(Value = "denver_co")]
            Denverco,
            
            /// <summary>
            /// Enum Detroitmi for "detroit_mi"
            /// </summary>
            [EnumMember(Value = "detroit_mi")]
            Detroitmi,
            
            /// <summary>
            /// Enum Edisonnj for "edison_nj"
            /// </summary>
            [EnumMember(Value = "edison_nj")]
            Edisonnj,
            
            /// <summary>
            /// Enum Grovecityoh for "grove_city_oh"
            /// </summary>
            [EnumMember(Value = "grove_city_oh")]
            Grovecityoh,
            
            /// <summary>
            /// Enum Groveportoh for "groveport_oh"
            /// </summary>
            [EnumMember(Value = "groveport_oh")]
            Groveportoh,
            
            /// <summary>
            /// Enum Houstontx for "houston_tx"
            /// </summary>
            [EnumMember(Value = "houston_tx")]
            Houstontx,
            
            /// <summary>
            /// Enum Indianapolisin for "indianapolis_in"
            /// </summary>
            [EnumMember(Value = "indianapolis_in")]
            Indianapolisin,
            
            /// <summary>
            /// Enum Kansascityks for "kansas_city_ks"
            /// </summary>
            [EnumMember(Value = "kansas_city_ks")]
            Kansascityks,
            
            /// <summary>
            /// Enum Losangelesca for "los_angeles_ca"
            /// </summary>
            [EnumMember(Value = "los_angeles_ca")]
            Losangelesca,
            
            /// <summary>
            /// Enum Martinsburgwv for "martinsburg_wv"
            /// </summary>
            [EnumMember(Value = "martinsburg_wv")]
            Martinsburgwv,
            
            /// <summary>
            /// Enum Memphistn for "memphis_tn"
            /// </summary>
            [EnumMember(Value = "memphis_tn")]
            Memphistn,
            
            /// <summary>
            /// Enum Minneapolismn for "minneapolis_mn"
            /// </summary>
            [EnumMember(Value = "minneapolis_mn")]
            Minneapolismn,
            
            /// <summary>
            /// Enum Newberlinwi for "new_berlin_wi"
            /// </summary>
            [EnumMember(Value = "new_berlin_wi")]
            Newberlinwi,
            
            /// <summary>
            /// Enum Northboroughma for "northborough_ma"
            /// </summary>
            [EnumMember(Value = "northborough_ma")]
            Northboroughma,
            
            /// <summary>
            /// Enum Orlandofl for "orlando_fl"
            /// </summary>
            [EnumMember(Value = "orlando_fl")]
            Orlandofl,
            
            /// <summary>
            /// Enum Phoneixaz for "phoneix_az"
            /// </summary>
            [EnumMember(Value = "phoneix_az")]
            Phoneixaz,
            
            /// <summary>
            /// Enum Pittsburghpa for "pittsburgh_pa"
            /// </summary>
            [EnumMember(Value = "pittsburgh_pa")]
            Pittsburghpa,
            
            /// <summary>
            /// Enum Renonv for "reno_nv"
            /// </summary>
            [EnumMember(Value = "reno_nv")]
            Renonv,
            
            /// <summary>
            /// Enum Sacramentoca for "sacramento_ca"
            /// </summary>
            [EnumMember(Value = "sacramento_ca")]
            Sacramentoca,
            
            /// <summary>
            /// Enum Saltlakecityut for "salt_lake_city_ut"
            /// </summary>
            [EnumMember(Value = "salt_lake_city_ut")]
            Saltlakecityut,
            
            /// <summary>
            /// Enum Seattlewa for "seattle_wa"
            /// </summary>
            [EnumMember(Value = "seattle_wa")]
            Seattlewa,
            
            /// <summary>
            /// Enum Stlouismo for "st_louis_mo"
            /// </summary>
            [EnumMember(Value = "st_louis_mo")]
            Stlouismo
        }

        /// <summary>
        /// Gets or Sets SmartPostEndorsement
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmartPostEndorsementEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Returnservicerequested for "return_service_requested"
            /// </summary>
            [EnumMember(Value = "return_service_requested")]
            Returnservicerequested,
            
            /// <summary>
            /// Enum Forwardingservicerequested for "forwarding_service_requested"
            /// </summary>
            [EnumMember(Value = "forwarding_service_requested")]
            Forwardingservicerequested,
            
            /// <summary>
            /// Enum Addressservicerequested for "address_service_requested"
            /// </summary>
            [EnumMember(Value = "address_service_requested")]
            Addressservicerequested,
            
            /// <summary>
            /// Enum Changeservicerequested for "change_service_requested"
            /// </summary>
            [EnumMember(Value = "change_service_requested")]
            Changeservicerequested,
            
            /// <summary>
            /// Enum Leaveifnoresponse for "leave_if_no_response"
            /// </summary>
            [EnumMember(Value = "leave_if_no_response")]
            Leaveifnoresponse
        }

        /// <summary>
        /// Gets or Sets PickupType
        /// </summary>
        [DataMember(Name="pickup_type", EmitDefaultValue=false)]
        public PickupTypeEnum? PickupType { get; set; }
        /// <summary>
        /// Gets or Sets SmartPostHub
        /// </summary>
        [DataMember(Name="smart_post_hub", EmitDefaultValue=false)]
        public SmartPostHubEnum? SmartPostHub { get; set; }
        /// <summary>
        /// Gets or Sets SmartPostEndorsement
        /// </summary>
        [DataMember(Name="smart_post_endorsement", EmitDefaultValue=false)]
        public SmartPostEndorsementEnum? SmartPostEndorsement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FedExAccountSettingsDTO" /> class.
        /// </summary>
        /// <param name="Nickname">Nickname.</param>
        /// <param name="PickupType">PickupType.</param>
        /// <param name="SmartPostHub">SmartPostHub.</param>
        /// <param name="SmartPostEndorsement">SmartPostEndorsement.</param>
        /// <param name="IsPrimaryAccount">IsPrimaryAccount.</param>
        public FedExAccountSettingsDTO(string Nickname = default(string), PickupTypeEnum? PickupType = default(PickupTypeEnum?), SmartPostHubEnum? SmartPostHub = default(SmartPostHubEnum?), SmartPostEndorsementEnum? SmartPostEndorsement = default(SmartPostEndorsementEnum?), bool? IsPrimaryAccount = default(bool?))
        {
            this.Nickname = Nickname;
            this.PickupType = PickupType;
            this.SmartPostHub = SmartPostHub;
            this.SmartPostEndorsement = SmartPostEndorsement;
            this.IsPrimaryAccount = IsPrimaryAccount;
        }
        
        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }




        /// <summary>
        /// Gets or Sets IsPrimaryAccount
        /// </summary>
        [DataMember(Name="is_primary_account", EmitDefaultValue=false)]
        public bool? IsPrimaryAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FedExAccountSettingsDTO {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  PickupType: ").Append(PickupType).Append("\n");
            sb.Append("  SmartPostHub: ").Append(SmartPostHub).Append("\n");
            sb.Append("  SmartPostEndorsement: ").Append(SmartPostEndorsement).Append("\n");
            sb.Append("  IsPrimaryAccount: ").Append(IsPrimaryAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FedExAccountSettingsDTO);
        }

        /// <summary>
        /// Returns true if FedExAccountSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FedExAccountSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FedExAccountSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.PickupType == input.PickupType ||
                    (this.PickupType != null &&
                    this.PickupType.Equals(input.PickupType))
                ) && 
                (
                    this.SmartPostHub == input.SmartPostHub ||
                    (this.SmartPostHub != null &&
                    this.SmartPostHub.Equals(input.SmartPostHub))
                ) && 
                (
                    this.SmartPostEndorsement == input.SmartPostEndorsement ||
                    (this.SmartPostEndorsement != null &&
                    this.SmartPostEndorsement.Equals(input.SmartPostEndorsement))
                ) && 
                (
                    this.IsPrimaryAccount == input.IsPrimaryAccount ||
                    (this.IsPrimaryAccount != null &&
                    this.IsPrimaryAccount.Equals(input.IsPrimaryAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.PickupType != null)
                    hashCode = hashCode * 59 + this.PickupType.GetHashCode();
                if (this.SmartPostHub != null)
                    hashCode = hashCode * 59 + this.SmartPostHub.GetHashCode();
                if (this.SmartPostEndorsement != null)
                    hashCode = hashCode * 59 + this.SmartPostEndorsement.GetHashCode();
                if (this.IsPrimaryAccount != null)
                    hashCode = hashCode * 59 + this.IsPrimaryAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
