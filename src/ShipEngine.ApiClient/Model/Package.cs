/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Package
    /// </summary>
    [DataContract]
    public class Package : IEquatable<Package>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        [JsonConstructor]
        protected Package()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="packageId">PackageId.</param>
        /// <param name="packageCode">PackageCode.</param>
        /// <param name="name">Name (required).</param>
        /// <param name="dimensions">Dimensions.</param>
        /// <param name="description">Description.</param>
        public Package(string packageId = default(string), string packageCode = default(string),
            string name = default(string), Dimensions dimensions = default(Dimensions),
            string description = default(string))
        {
            // to ensure "Name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("Name is a required property for Package and cannot be null");
            }
            Name = name;
            PackageId = packageId;
            PackageCode = packageCode;
            Dimensions = dimensions;
            Description = description;
        }

        /// <summary>
        ///     Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "package_id", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        ///     Gets or Sets PackageCode
        /// </summary>
        [DataMember(Name = "package_code", EmitDefaultValue = false)]
        public string PackageCode { get; set; }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        ///     Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        ///     Returns true if Package instances are equal
        /// </summary>
        /// <param name="other">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    PackageId == other.PackageId ||
                    PackageId != null &&
                    PackageId.Equals(other.PackageId)
                ) &&
                (
                    PackageCode == other.PackageCode ||
                    PackageCode != null &&
                    PackageCode.Equals(other.PackageCode)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Equals(Dimensions, other.Dimensions) ||
                    Dimensions != null &&
                    Dimensions.Equals(other.Dimensions)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  PackageCode: ").Append(PackageCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Package);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (PackageId != null)
                {
                    hash = hash * 59 + PackageId.GetHashCode();
                }
                if (PackageCode != null)
                {
                    hash = hash * 59 + PackageCode.GetHashCode();
                }
                if (Name != null)
                {
                    hash = hash * 59 + Name.GetHashCode();
                }
                if (Dimensions != null)
                {
                    hash = hash * 59 + Dimensions.GetHashCode();
                }
                if (Description != null)
                {
                    hash = hash * 59 + Description.GetHashCode();
                }
                return hash;
            }
        }
    }
}