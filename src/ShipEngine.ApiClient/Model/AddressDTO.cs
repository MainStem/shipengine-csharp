/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     AddressDTO
    /// </summary>
    [DataContract]
    public class AddressDTO : IEquatable<AddressDTO>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets AddressResidentialIndicator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressResidentialIndicatorEnum
        {
            /// <summary>
            ///     Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")] Unknown,

            /// <summary>
            ///     Enum Yes for "yes"
            /// </summary>
            [EnumMember(Value = "yes")] Yes,

            /// <summary>
            ///     Enum No for "no"
            /// </summary>
            [EnumMember(Value = "no")] No
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AddressDTO" /> class.
        /// </summary>
        /// <param name="name">Name.</param>
        /// <param name="phone">Phone.</param>
        /// <param name="companyName">CompanyName.</param>
        /// <param name="addressLine1">AddressLine1.</param>
        /// <param name="addressLine2">AddressLine2.</param>
        /// <param name="addressLine3">AddressLine3.</param>
        /// <param name="cityLocality">CityLocality.</param>
        /// <param name="stateProvince">StateProvince.</param>
        /// <param name="postalCode">PostalCode.</param>
        /// <param name="countryCode">CountryCode.</param>
        /// <param name="addressResidentialIndicator">AddressResidentialIndicator.</param>
        public AddressDTO(string name = default(string), string phone = default(string),
            string companyName = default(string), string addressLine1 = default(string),
            string addressLine2 = default(string), string addressLine3 = default(string),
            string cityLocality = default(string), string stateProvince = default(string),
            string postalCode = default(string), string countryCode = default(string),
            AddressResidentialIndicatorEnum? addressResidentialIndicator = default(AddressResidentialIndicatorEnum?))
        {
            Name = name;
            Phone = phone;
            CompanyName = companyName;
            AddressLine1 = addressLine1;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            CityLocality = cityLocality;
            StateProvince = stateProvince;
            PostalCode = postalCode;
            CountryCode = countryCode;
            AddressResidentialIndicator = addressResidentialIndicator;
        }

        /// <summary>
        ///     Gets or Sets AddressResidentialIndicator
        /// </summary>
        [DataMember(Name = "address_residential_indicator", EmitDefaultValue = false)]
        public AddressResidentialIndicatorEnum? AddressResidentialIndicator { get; set; }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        ///     Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "address_line1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "address_line2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        ///     Gets or Sets AddressLine3
        /// </summary>
        [DataMember(Name = "address_line3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        ///     Gets or Sets CityLocality
        /// </summary>
        [DataMember(Name = "city_locality", EmitDefaultValue = false)]
        public string CityLocality { get; set; }

        /// <summary>
        ///     Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name = "state_province", EmitDefaultValue = false)]
        public string StateProvince { get; set; }

        /// <summary>
        ///     Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        ///     Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        ///     Returns true if AddressDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) &&
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) &&
                (
                    AddressLine1 == other.AddressLine1 ||
                    AddressLine1 != null &&
                    AddressLine1.Equals(other.AddressLine1)
                ) &&
                (
                    AddressLine2 == other.AddressLine2 ||
                    AddressLine2 != null &&
                    AddressLine2.Equals(other.AddressLine2)
                ) &&
                (
                    AddressLine3 == other.AddressLine3 ||
                    AddressLine3 != null &&
                    AddressLine3.Equals(other.AddressLine3)
                ) &&
                (
                    CityLocality == other.CityLocality ||
                    CityLocality != null &&
                    CityLocality.Equals(other.CityLocality)
                ) &&
                (
                    StateProvince == other.StateProvince ||
                    StateProvince != null &&
                    StateProvince.Equals(other.StateProvince)
                ) &&
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) &&
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) &&
                (
                    AddressResidentialIndicator == other.AddressResidentialIndicator ||
                    AddressResidentialIndicator != null &&
                    AddressResidentialIndicator.Equals(other.AddressResidentialIndicator)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  CityLocality: ").Append(CityLocality).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  AddressResidentialIndicator: ").Append(AddressResidentialIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as AddressDTO);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                {
                    hash = hash * 59 + Name.GetHashCode();
                }
                if (Phone != null)
                {
                    hash = hash * 59 + Phone.GetHashCode();
                }
                if (CompanyName != null)
                {
                    hash = hash * 59 + CompanyName.GetHashCode();
                }
                if (AddressLine1 != null)
                {
                    hash = hash * 59 + AddressLine1.GetHashCode();
                }
                if (AddressLine2 != null)
                {
                    hash = hash * 59 + AddressLine2.GetHashCode();
                }
                if (AddressLine3 != null)
                {
                    hash = hash * 59 + AddressLine3.GetHashCode();
                }
                if (CityLocality != null)
                {
                    hash = hash * 59 + CityLocality.GetHashCode();
                }
                if (StateProvince != null)
                {
                    hash = hash * 59 + StateProvince.GetHashCode();
                }
                if (PostalCode != null)
                {
                    hash = hash * 59 + PostalCode.GetHashCode();
                }
                if (CountryCode != null)
                {
                    hash = hash * 59 + CountryCode.GetHashCode();
                }
                if (AddressResidentialIndicator != null)
                {
                    hash = hash * 59 + AddressResidentialIndicator.GetHashCode();
                }
                return hash;
            }
        }
    }
}