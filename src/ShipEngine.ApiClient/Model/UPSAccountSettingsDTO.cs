/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// UPSAccountSettingsDTO
    /// </summary>
    [DataContract]
    public partial class UPSAccountSettingsDTO :  IEquatable<UPSAccountSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PickupType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickupTypeEnum
        {
            
            /// <summary>
            /// Enum DailyPickup for "dailyPickup"
            /// </summary>
            [EnumMember(Value = "dailyPickup")]
            DailyPickup = 1,
            
            /// <summary>
            /// Enum OccasionalPickup for "occasionalPickup"
            /// </summary>
            [EnumMember(Value = "occasionalPickup")]
            OccasionalPickup = 2,
            
            /// <summary>
            /// Enum CustomerCounter for "customerCounter"
            /// </summary>
            [EnumMember(Value = "customerCounter")]
            CustomerCounter = 3
        }

        /// <summary>
        /// Gets or Sets PickupType
        /// </summary>
        [DataMember(Name="pickup_type", EmitDefaultValue=false)]
        public PickupTypeEnum? PickupType { get; set; }
        /// <summary>
        /// Gets or Sets MailInnovationsEndorsement
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MailInnovationsEndorsementEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Returnservicerequested for "return_service_requested"
            /// </summary>
            [EnumMember(Value = "return_service_requested")]
            Returnservicerequested = 2,
            
            /// <summary>
            /// Enum Forwardingservicerequested for "forwarding_service_requested"
            /// </summary>
            [EnumMember(Value = "forwarding_service_requested")]
            Forwardingservicerequested = 3,
            
            /// <summary>
            /// Enum Addressservicerequested for "address_service_requested"
            /// </summary>
            [EnumMember(Value = "address_service_requested")]
            Addressservicerequested = 4,
            
            /// <summary>
            /// Enum Changeservicerequested for "change_service_requested"
            /// </summary>
            [EnumMember(Value = "change_service_requested")]
            Changeservicerequested = 5,
            
            /// <summary>
            /// Enum Leaveifnoresponse for "leave_if_no_response"
            /// </summary>
            [EnumMember(Value = "leave_if_no_response")]
            Leaveifnoresponse = 6
        }

        /// <summary>
        /// Gets or Sets MailInnovationsEndorsement
        /// </summary>
        [DataMember(Name="mail_innovations_endorsement", EmitDefaultValue=false)]
        public MailInnovationsEndorsementEnum? MailInnovationsEndorsement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UPSAccountSettingsDTO" /> class.
        /// </summary>
        /// <param name="Nickname">Nickname.</param>
        /// <param name="IsPrimaryAccount">IsPrimaryAccount.</param>
        /// <param name="PickupType">PickupType.</param>
        /// <param name="UseCarbonNeutralShippingProgram">UseCarbonNeutralShippingProgram.</param>
        /// <param name="UseGroundFreightPricing">UseGroundFreightPricing.</param>
        /// <param name="UseConsolidationServices">UseConsolidationServices.</param>
        /// <param name="UseOrderNumberOnMailInnovationsLabels">UseOrderNumberOnMailInnovationsLabels.</param>
        /// <param name="MailInnovationsEndorsement">MailInnovationsEndorsement.</param>
        /// <param name="MailInnovationsCostCenter">MailInnovationsCostCenter.</param>
        /// <param name="UseNegotiatedRates">UseNegotiatedRates.</param>
        /// <param name="AccountPostalCode">AccountPostalCode.</param>
        /// <param name="Invoice">Invoice.</param>
        public UPSAccountSettingsDTO(string Nickname = default(string), bool? IsPrimaryAccount = default(bool?), PickupTypeEnum? PickupType = default(PickupTypeEnum?), bool? UseCarbonNeutralShippingProgram = default(bool?), bool? UseGroundFreightPricing = default(bool?), bool? UseConsolidationServices = default(bool?), bool? UseOrderNumberOnMailInnovationsLabels = default(bool?), MailInnovationsEndorsementEnum? MailInnovationsEndorsement = default(MailInnovationsEndorsementEnum?), string MailInnovationsCostCenter = default(string), bool? UseNegotiatedRates = default(bool?), string AccountPostalCode = default(string), UPSInvoiceDTO Invoice = default(UPSInvoiceDTO))
        {
            this.Nickname = Nickname;
            this.IsPrimaryAccount = IsPrimaryAccount;
            this.PickupType = PickupType;
            this.UseCarbonNeutralShippingProgram = UseCarbonNeutralShippingProgram;
            this.UseGroundFreightPricing = UseGroundFreightPricing;
            this.UseConsolidationServices = UseConsolidationServices;
            this.UseOrderNumberOnMailInnovationsLabels = UseOrderNumberOnMailInnovationsLabels;
            this.MailInnovationsEndorsement = MailInnovationsEndorsement;
            this.MailInnovationsCostCenter = MailInnovationsCostCenter;
            this.UseNegotiatedRates = UseNegotiatedRates;
            this.AccountPostalCode = AccountPostalCode;
            this.Invoice = Invoice;
        }
        
        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimaryAccount
        /// </summary>
        [DataMember(Name="is_primary_account", EmitDefaultValue=false)]
        public bool? IsPrimaryAccount { get; set; }


        /// <summary>
        /// Gets or Sets UseCarbonNeutralShippingProgram
        /// </summary>
        [DataMember(Name="use_carbon_neutral_shipping_program", EmitDefaultValue=false)]
        public bool? UseCarbonNeutralShippingProgram { get; set; }

        /// <summary>
        /// Gets or Sets UseGroundFreightPricing
        /// </summary>
        [DataMember(Name="use_ground_freight_pricing", EmitDefaultValue=false)]
        public bool? UseGroundFreightPricing { get; set; }

        /// <summary>
        /// Gets or Sets UseConsolidationServices
        /// </summary>
        [DataMember(Name="use_consolidation_services", EmitDefaultValue=false)]
        public bool? UseConsolidationServices { get; set; }

        /// <summary>
        /// Gets or Sets UseOrderNumberOnMailInnovationsLabels
        /// </summary>
        [DataMember(Name="use_order_number_on_mail_innovations_labels", EmitDefaultValue=false)]
        public bool? UseOrderNumberOnMailInnovationsLabels { get; set; }


        /// <summary>
        /// Gets or Sets MailInnovationsCostCenter
        /// </summary>
        [DataMember(Name="mail_innovations_cost_center", EmitDefaultValue=false)]
        public string MailInnovationsCostCenter { get; set; }

        /// <summary>
        /// Gets or Sets UseNegotiatedRates
        /// </summary>
        [DataMember(Name="use_negotiated_rates", EmitDefaultValue=false)]
        public bool? UseNegotiatedRates { get; set; }

        /// <summary>
        /// Gets or Sets AccountPostalCode
        /// </summary>
        [DataMember(Name="account_postal_code", EmitDefaultValue=false)]
        public string AccountPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name="invoice", EmitDefaultValue=false)]
        public UPSInvoiceDTO Invoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UPSAccountSettingsDTO {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  IsPrimaryAccount: ").Append(IsPrimaryAccount).Append("\n");
            sb.Append("  PickupType: ").Append(PickupType).Append("\n");
            sb.Append("  UseCarbonNeutralShippingProgram: ").Append(UseCarbonNeutralShippingProgram).Append("\n");
            sb.Append("  UseGroundFreightPricing: ").Append(UseGroundFreightPricing).Append("\n");
            sb.Append("  UseConsolidationServices: ").Append(UseConsolidationServices).Append("\n");
            sb.Append("  UseOrderNumberOnMailInnovationsLabels: ").Append(UseOrderNumberOnMailInnovationsLabels).Append("\n");
            sb.Append("  MailInnovationsEndorsement: ").Append(MailInnovationsEndorsement).Append("\n");
            sb.Append("  MailInnovationsCostCenter: ").Append(MailInnovationsCostCenter).Append("\n");
            sb.Append("  UseNegotiatedRates: ").Append(UseNegotiatedRates).Append("\n");
            sb.Append("  AccountPostalCode: ").Append(AccountPostalCode).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UPSAccountSettingsDTO);
        }

        /// <summary>
        /// Returns true if UPSAccountSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UPSAccountSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UPSAccountSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.IsPrimaryAccount == input.IsPrimaryAccount ||
                    (this.IsPrimaryAccount != null &&
                    this.IsPrimaryAccount.Equals(input.IsPrimaryAccount))
                ) && 
                (
                    this.PickupType == input.PickupType ||
                    (this.PickupType != null &&
                    this.PickupType.Equals(input.PickupType))
                ) && 
                (
                    this.UseCarbonNeutralShippingProgram == input.UseCarbonNeutralShippingProgram ||
                    (this.UseCarbonNeutralShippingProgram != null &&
                    this.UseCarbonNeutralShippingProgram.Equals(input.UseCarbonNeutralShippingProgram))
                ) && 
                (
                    this.UseGroundFreightPricing == input.UseGroundFreightPricing ||
                    (this.UseGroundFreightPricing != null &&
                    this.UseGroundFreightPricing.Equals(input.UseGroundFreightPricing))
                ) && 
                (
                    this.UseConsolidationServices == input.UseConsolidationServices ||
                    (this.UseConsolidationServices != null &&
                    this.UseConsolidationServices.Equals(input.UseConsolidationServices))
                ) && 
                (
                    this.UseOrderNumberOnMailInnovationsLabels == input.UseOrderNumberOnMailInnovationsLabels ||
                    (this.UseOrderNumberOnMailInnovationsLabels != null &&
                    this.UseOrderNumberOnMailInnovationsLabels.Equals(input.UseOrderNumberOnMailInnovationsLabels))
                ) && 
                (
                    this.MailInnovationsEndorsement == input.MailInnovationsEndorsement ||
                    (this.MailInnovationsEndorsement != null &&
                    this.MailInnovationsEndorsement.Equals(input.MailInnovationsEndorsement))
                ) && 
                (
                    this.MailInnovationsCostCenter == input.MailInnovationsCostCenter ||
                    (this.MailInnovationsCostCenter != null &&
                    this.MailInnovationsCostCenter.Equals(input.MailInnovationsCostCenter))
                ) && 
                (
                    this.UseNegotiatedRates == input.UseNegotiatedRates ||
                    (this.UseNegotiatedRates != null &&
                    this.UseNegotiatedRates.Equals(input.UseNegotiatedRates))
                ) && 
                (
                    this.AccountPostalCode == input.AccountPostalCode ||
                    (this.AccountPostalCode != null &&
                    this.AccountPostalCode.Equals(input.AccountPostalCode))
                ) && 
                (
                    this.Invoice == input.Invoice ||
                    (this.Invoice != null &&
                    this.Invoice.Equals(input.Invoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.IsPrimaryAccount != null)
                    hashCode = hashCode * 59 + this.IsPrimaryAccount.GetHashCode();
                if (this.PickupType != null)
                    hashCode = hashCode * 59 + this.PickupType.GetHashCode();
                if (this.UseCarbonNeutralShippingProgram != null)
                    hashCode = hashCode * 59 + this.UseCarbonNeutralShippingProgram.GetHashCode();
                if (this.UseGroundFreightPricing != null)
                    hashCode = hashCode * 59 + this.UseGroundFreightPricing.GetHashCode();
                if (this.UseConsolidationServices != null)
                    hashCode = hashCode * 59 + this.UseConsolidationServices.GetHashCode();
                if (this.UseOrderNumberOnMailInnovationsLabels != null)
                    hashCode = hashCode * 59 + this.UseOrderNumberOnMailInnovationsLabels.GetHashCode();
                if (this.MailInnovationsEndorsement != null)
                    hashCode = hashCode * 59 + this.MailInnovationsEndorsement.GetHashCode();
                if (this.MailInnovationsCostCenter != null)
                    hashCode = hashCode * 59 + this.MailInnovationsCostCenter.GetHashCode();
                if (this.UseNegotiatedRates != null)
                    hashCode = hashCode * 59 + this.UseNegotiatedRates.GetHashCode();
                if (this.AccountPostalCode != null)
                    hashCode = hashCode * 59 + this.AccountPostalCode.GetHashCode();
                if (this.Invoice != null)
                    hashCode = hashCode * 59 + this.Invoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
