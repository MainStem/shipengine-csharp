/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     CustomsItem
    /// </summary>
    [DataContract]
    public class CustomsItem : IEquatable<CustomsItem>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CustomsItem" /> class.
        /// </summary>
        /// <param name="customsItemId">CustomsItemId.</param>
        /// <param name="description">Description.</param>
        /// <param name="quantity">Quantity.</param>
        /// <param name="value">Value.</param>
        /// <param name="harmonizedTariffCode">HarmonizedTariffCode.</param>
        /// <param name="countryOfOrigin">CountryOfOrigin.</param>
        public CustomsItem(string customsItemId = default(string), string description = default(string),
            int? quantity = default(int?), decimal? value = default(decimal?),
            string harmonizedTariffCode = default(string), string countryOfOrigin = default(string))
        {
            CustomsItemId = customsItemId;
            Description = description;
            Quantity = quantity;
            Value = value;
            HarmonizedTariffCode = harmonizedTariffCode;
            CountryOfOrigin = countryOfOrigin;
        }

        /// <summary>
        ///     Gets or Sets CustomsItemId
        /// </summary>
        [DataMember(Name = "customs_item_id", EmitDefaultValue = false)]
        public string CustomsItemId { get; set; }

        /// <summary>
        ///     Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        ///     Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        ///     Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal? Value { get; set; }

        /// <summary>
        ///     Gets or Sets HarmonizedTariffCode
        /// </summary>
        [DataMember(Name = "harmonized_tariff_code", EmitDefaultValue = false)]
        public string HarmonizedTariffCode { get; set; }

        /// <summary>
        ///     Gets or Sets CountryOfOrigin
        /// </summary>
        [DataMember(Name = "country_of_origin", EmitDefaultValue = false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        ///     Returns true if CustomsItem instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomsItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    CustomsItemId == other.CustomsItemId ||
                    CustomsItemId != null &&
                    CustomsItemId.Equals(other.CustomsItemId)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) &&
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) &&
                (
                    HarmonizedTariffCode == other.HarmonizedTariffCode ||
                    HarmonizedTariffCode != null &&
                    HarmonizedTariffCode.Equals(other.HarmonizedTariffCode)
                ) &&
                (
                    CountryOfOrigin == other.CountryOfOrigin ||
                    CountryOfOrigin != null &&
                    CountryOfOrigin.Equals(other.CountryOfOrigin)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomsItem {\n");
            sb.Append("  CustomsItemId: ").Append(CustomsItemId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  HarmonizedTariffCode: ").Append(HarmonizedTariffCode).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CustomsItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (CustomsItemId != null)
                {
                    hash = hash * 59 + CustomsItemId.GetHashCode();
                }
                if (Description != null)
                {
                    hash = hash * 59 + Description.GetHashCode();
                }
                if (Quantity != null)
                {
                    hash = hash * 59 + Quantity.GetHashCode();
                }
                if (Value != null)
                {
                    hash = hash * 59 + Value.GetHashCode();
                }
                if (HarmonizedTariffCode != null)
                {
                    hash = hash * 59 + HarmonizedTariffCode.GetHashCode();
                }
                if (CountryOfOrigin != null)
                {
                    hash = hash * 59 + CountryOfOrigin.GetHashCode();
                }
                return hash;
            }
        }
    }
}