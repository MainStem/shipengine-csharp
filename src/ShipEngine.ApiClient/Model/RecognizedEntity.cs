/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// RecognizedEntity
    /// </summary>
    [DataContract]
    public partial class RecognizedEntity :  IEquatable<RecognizedEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizedEntity" /> class.
        /// </summary>
        /// <param name="type">The Entity type (e.g. \&quot;weight\&quot;, \&quot;person\&quot;, \&quot;address_line1\&quot;, etc.).</param>
        /// <param name="score">A confidence score between zero and one that indicates how certain the API is that this entity is correct.</param>
        /// <param name="text">The substring from the original text that was recognized as this entity.</param>
        /// <param name="startIndex">The index of the first character of this entity withing the original text.</param>
        /// <param name="endIndex">The index of the last character of this entity withing the original text.</param>
        /// <param name="result">The result object will be different for each entity type.  Most entity results will have a \&quot;value\&quot; property, which is the normalized value of the entity.  For example, if the substring \&quot;john doe\&quot; was recognized as a \&quot;person\&quot; entity, then the value might be normalized to have proper capitalization (e.g. \&quot;John Doe\&quot;).  Or if the substring \&quot;dalas\&quot; was recognized as a \&quot;city\&quot; entity, then the value might be normalized to have proper capitalization and correct the misspelling of \&quot;Dallas\&quot;.  Some entities will have other information in addition to, or instead of a \&quot;value\&quot; property.  For example, a \&quot;dimensions\&quot; entity will have separate properties for \&quot;length\&quot;, \&quot;width\&quot;, \&quot;height\&quot;, and \&quot;unit\&quot;..</param>
        public RecognizedEntity(string type = default(string), double? score = default(double?), string text = default(string), decimal? startIndex = default(decimal?), decimal? endIndex = default(decimal?), Object result = default(Object))
        {
            this.Type = type;
            this.Score = score;
            this.Text = text;
            this.StartIndex = startIndex;
            this.EndIndex = endIndex;
            this.Result = result;
        }
        
        /// <summary>
        /// The Entity type (e.g. \&quot;weight\&quot;, \&quot;person\&quot;, \&quot;address_line1\&quot;, etc.)
        /// </summary>
        /// <value>The Entity type (e.g. \&quot;weight\&quot;, \&quot;person\&quot;, \&quot;address_line1\&quot;, etc.)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// A confidence score between zero and one that indicates how certain the API is that this entity is correct
        /// </summary>
        /// <value>A confidence score between zero and one that indicates how certain the API is that this entity is correct</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// The substring from the original text that was recognized as this entity
        /// </summary>
        /// <value>The substring from the original text that was recognized as this entity</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The index of the first character of this entity withing the original text
        /// </summary>
        /// <value>The index of the first character of this entity withing the original text</value>
        [DataMember(Name="start_index", EmitDefaultValue=false)]
        public decimal? StartIndex { get; set; }

        /// <summary>
        /// The index of the last character of this entity withing the original text
        /// </summary>
        /// <value>The index of the last character of this entity withing the original text</value>
        [DataMember(Name="end_index", EmitDefaultValue=false)]
        public decimal? EndIndex { get; set; }

        /// <summary>
        /// The result object will be different for each entity type.  Most entity results will have a \&quot;value\&quot; property, which is the normalized value of the entity.  For example, if the substring \&quot;john doe\&quot; was recognized as a \&quot;person\&quot; entity, then the value might be normalized to have proper capitalization (e.g. \&quot;John Doe\&quot;).  Or if the substring \&quot;dalas\&quot; was recognized as a \&quot;city\&quot; entity, then the value might be normalized to have proper capitalization and correct the misspelling of \&quot;Dallas\&quot;.  Some entities will have other information in addition to, or instead of a \&quot;value\&quot; property.  For example, a \&quot;dimensions\&quot; entity will have separate properties for \&quot;length\&quot;, \&quot;width\&quot;, \&quot;height\&quot;, and \&quot;unit\&quot;.
        /// </summary>
        /// <value>The result object will be different for each entity type.  Most entity results will have a \&quot;value\&quot; property, which is the normalized value of the entity.  For example, if the substring \&quot;john doe\&quot; was recognized as a \&quot;person\&quot; entity, then the value might be normalized to have proper capitalization (e.g. \&quot;John Doe\&quot;).  Or if the substring \&quot;dalas\&quot; was recognized as a \&quot;city\&quot; entity, then the value might be normalized to have proper capitalization and correct the misspelling of \&quot;Dallas\&quot;.  Some entities will have other information in addition to, or instead of a \&quot;value\&quot; property.  For example, a \&quot;dimensions\&quot; entity will have separate properties for \&quot;length\&quot;, \&quot;width\&quot;, \&quot;height\&quot;, and \&quot;unit\&quot;.</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Object Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecognizedEntity {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  EndIndex: ").Append(EndIndex).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecognizedEntity);
        }

        /// <summary>
        /// Returns true if RecognizedEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of RecognizedEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecognizedEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                ) && 
                (
                    this.EndIndex == input.EndIndex ||
                    (this.EndIndex != null &&
                    this.EndIndex.Equals(input.EndIndex))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                if (this.EndIndex != null)
                    hashCode = hashCode * 59 + this.EndIndex.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 100.", new [] { "Type" });
            }

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Score (double?) maximum
            if(this.Score > (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 1.", new [] { "Score" });
            }

            // Score (double?) minimum
            if(this.Score < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // Text (string) minLength
            if(this.Text != null && this.Text.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be greater than 1.", new [] { "Text" });
            }

            // StartIndex (decimal?) minimum
            if(this.StartIndex < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartIndex, must be a value greater than or equal to 0.", new [] { "StartIndex" });
            }

            // EndIndex (decimal?) minimum
            if(this.EndIndex < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndIndex, must be a value greater than or equal to 0.", new [] { "EndIndex" });
            }

            yield break;
        }
    }

}
