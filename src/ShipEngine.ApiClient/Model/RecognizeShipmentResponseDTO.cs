/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// RecognizeShipmentResponseDTO
    /// </summary>
    [DataContract]
    public partial class RecognizeShipmentResponseDTO :  IEquatable<RecognizeShipmentResponseDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeShipmentResponseDTO" /> class.
        /// </summary>
        /// <param name="score">A confidence score between zero and one that indicates how certain the API is that it understood the text.</param>
        /// <param name="shipment">shipment.</param>
        /// <param name="entities">An array containing all of the entities that were recognized..</param>
        public RecognizeShipmentResponseDTO(double? score = default(double?), Shipment shipment = default(Shipment), List<RecognizedEntity> entities = default(List<RecognizedEntity>))
        {
            this.Score = score;
            this.Shipment = shipment;
            this.Entities = entities;
        }
        
        /// <summary>
        /// A confidence score between zero and one that indicates how certain the API is that it understood the text
        /// </summary>
        /// <value>A confidence score between zero and one that indicates how certain the API is that it understood the text</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Gets or Sets Shipment
        /// </summary>
        [DataMember(Name="shipment", EmitDefaultValue=false)]
        public Shipment Shipment { get; set; }

        /// <summary>
        /// An array containing all of the entities that were recognized.
        /// </summary>
        /// <value>An array containing all of the entities that were recognized.</value>
        [DataMember(Name="entities", EmitDefaultValue=false)]
        public List<RecognizedEntity> Entities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecognizeShipmentResponseDTO {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Shipment: ").Append(Shipment).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecognizeShipmentResponseDTO);
        }

        /// <summary>
        /// Returns true if RecognizeShipmentResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RecognizeShipmentResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecognizeShipmentResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Shipment == input.Shipment ||
                    (this.Shipment != null &&
                    this.Shipment.Equals(input.Shipment))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Shipment != null)
                    hashCode = hashCode * 59 + this.Shipment.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double?) maximum
            if(this.Score > (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 1.", new [] { "Score" });
            }

            // Score (double?) minimum
            if(this.Score < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}
