/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     RateEstimateRequest
    /// </summary>
    [DataContract]
    public class RateEstimateRequest : IEquatable<RateEstimateRequest>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets AddressResidentialIndicator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressResidentialIndicatorEnum
        {
            /// <summary>
            ///     Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")] Unknown,

            /// <summary>
            ///     Enum Yes for "yes"
            /// </summary>
            [EnumMember(Value = "yes")] Yes,

            /// <summary>
            ///     Enum No for "no"
            /// </summary>
            [EnumMember(Value = "no")] No
        }

        /// <summary>
        ///     Gets or Sets Confirmation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfirmationEnum
        {
            /// <summary>
            ///     Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")] None,

            /// <summary>
            ///     Enum Delivery for "delivery"
            /// </summary>
            [EnumMember(Value = "delivery")] Delivery,

            /// <summary>
            ///     Enum Signature for "signature"
            /// </summary>
            [EnumMember(Value = "signature")] Signature,

            /// <summary>
            ///     Enum Adultsignature for "adult_signature"
            /// </summary>
            [EnumMember(Value = "adult_signature")] Adultsignature,

            /// <summary>
            ///     Enum Directsignature for "direct_signature"
            /// </summary>
            [EnumMember(Value = "direct_signature")] Directsignature
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RateEstimateRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected RateEstimateRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RateEstimateRequest" /> class.
        /// </summary>
        /// <param name="carrierId">CarrierId (required).</param>
        /// <param name="fromCountryCode">FromCountryCode.</param>
        /// <param name="fromPostalCode">FromPostalCode.</param>
        /// <param name="toCountryCode">ToCountryCode.</param>
        /// <param name="toPostalCode">ToPostalCode.</param>
        /// <param name="toCityLocality">ToCityLocality.</param>
        /// <param name="toStateProvince">ToStateProvince.</param>
        /// <param name="weight">Weight.</param>
        /// <param name="dimensions">Dimensions.</param>
        /// <param name="confirmation">Confirmation.</param>
        /// <param name="addressResidentialIndicator">AddressResidentialIndicator.</param>
        /// <param name="shipDate">ShipDate.</param>
        public RateEstimateRequest(string carrierId = default(string), string fromCountryCode = default(string),
            string fromPostalCode = default(string), string toCountryCode = default(string),
            string toPostalCode = default(string), string toCityLocality = default(string),
            string toStateProvince = default(string), Weight weight = default(Weight),
            Dimensions dimensions = default(Dimensions), ConfirmationEnum? confirmation = default(ConfirmationEnum?),
            AddressResidentialIndicatorEnum? addressResidentialIndicator = default(AddressResidentialIndicatorEnum?),
            DateTime? shipDate = default(DateTime?))
        {
            // to ensure "CarrierId" is required (not null)
            if (carrierId == null)
            {
                throw new InvalidDataException(
                    "CarrierId is a required property for RateEstimateRequest and cannot be null");
            }
            CarrierId = carrierId;
            FromCountryCode = fromCountryCode;
            FromPostalCode = fromPostalCode;
            ToCountryCode = toCountryCode;
            ToPostalCode = toPostalCode;
            ToCityLocality = toCityLocality;
            ToStateProvince = toStateProvince;
            Weight = weight;
            Dimensions = dimensions;
            Confirmation = confirmation;
            AddressResidentialIndicator = addressResidentialIndicator;
            ShipDate = shipDate;
        }

        /// <summary>
        ///     Gets or Sets Confirmation
        /// </summary>
        [DataMember(Name = "confirmation", EmitDefaultValue = false)]
        public ConfirmationEnum? Confirmation { get; set; }

        /// <summary>
        ///     Gets or Sets AddressResidentialIndicator
        /// </summary>
        [DataMember(Name = "address_residential_indicator", EmitDefaultValue = false)]
        public AddressResidentialIndicatorEnum? AddressResidentialIndicator { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets FromCountryCode
        /// </summary>
        [DataMember(Name = "from_country_code", EmitDefaultValue = false)]
        public string FromCountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets FromPostalCode
        /// </summary>
        [DataMember(Name = "from_postal_code", EmitDefaultValue = false)]
        public string FromPostalCode { get; set; }

        /// <summary>
        ///     Gets or Sets ToCountryCode
        /// </summary>
        [DataMember(Name = "to_country_code", EmitDefaultValue = false)]
        public string ToCountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets ToPostalCode
        /// </summary>
        [DataMember(Name = "to_postal_code", EmitDefaultValue = false)]
        public string ToPostalCode { get; set; }

        /// <summary>
        ///     Gets or Sets ToCityLocality
        /// </summary>
        [DataMember(Name = "to_city_locality", EmitDefaultValue = false)]
        public string ToCityLocality { get; set; }

        /// <summary>
        ///     Gets or Sets ToStateProvince
        /// </summary>
        [DataMember(Name = "to_state_province", EmitDefaultValue = false)]
        public string ToStateProvince { get; set; }

        /// <summary>
        ///     Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        ///     Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        ///     Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "ship_date", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        ///     Returns true if RateEstimateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RateEstimateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateEstimateRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    FromCountryCode == other.FromCountryCode ||
                    FromCountryCode != null &&
                    FromCountryCode.Equals(other.FromCountryCode)
                ) &&
                (
                    FromPostalCode == other.FromPostalCode ||
                    FromPostalCode != null &&
                    FromPostalCode.Equals(other.FromPostalCode)
                ) &&
                (
                    ToCountryCode == other.ToCountryCode ||
                    ToCountryCode != null &&
                    ToCountryCode.Equals(other.ToCountryCode)
                ) &&
                (
                    ToPostalCode == other.ToPostalCode ||
                    ToPostalCode != null &&
                    ToPostalCode.Equals(other.ToPostalCode)
                ) &&
                (
                    ToCityLocality == other.ToCityLocality ||
                    ToCityLocality != null &&
                    ToCityLocality.Equals(other.ToCityLocality)
                ) &&
                (
                    ToStateProvince == other.ToStateProvince ||
                    ToStateProvince != null &&
                    ToStateProvince.Equals(other.ToStateProvince)
                ) &&
                (
                    Equals(Weight, other.Weight) ||
                    Weight != null &&
                    Weight.Equals(other.Weight)
                ) &&
                (
                    Equals(Dimensions, other.Dimensions) ||
                    Dimensions != null &&
                    Dimensions.Equals(other.Dimensions)
                ) &&
                (
                    Confirmation == other.Confirmation ||
                    Confirmation != null &&
                    Confirmation.Equals(other.Confirmation)
                ) &&
                (
                    AddressResidentialIndicator == other.AddressResidentialIndicator ||
                    AddressResidentialIndicator != null &&
                    AddressResidentialIndicator.Equals(other.AddressResidentialIndicator)
                ) &&
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RateEstimateRequest {\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  FromCountryCode: ").Append(FromCountryCode).Append("\n");
            sb.Append("  FromPostalCode: ").Append(FromPostalCode).Append("\n");
            sb.Append("  ToCountryCode: ").Append(ToCountryCode).Append("\n");
            sb.Append("  ToPostalCode: ").Append(ToPostalCode).Append("\n");
            sb.Append("  ToCityLocality: ").Append(ToCityLocality).Append("\n");
            sb.Append("  ToStateProvince: ").Append(ToStateProvince).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Confirmation: ").Append(Confirmation).Append("\n");
            sb.Append("  AddressResidentialIndicator: ").Append(AddressResidentialIndicator).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as RateEstimateRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (FromCountryCode != null)
                {
                    hash = hash * 59 + FromCountryCode.GetHashCode();
                }
                if (FromPostalCode != null)
                {
                    hash = hash * 59 + FromPostalCode.GetHashCode();
                }
                if (ToCountryCode != null)
                {
                    hash = hash * 59 + ToCountryCode.GetHashCode();
                }
                if (ToPostalCode != null)
                {
                    hash = hash * 59 + ToPostalCode.GetHashCode();
                }
                if (ToCityLocality != null)
                {
                    hash = hash * 59 + ToCityLocality.GetHashCode();
                }
                if (ToStateProvince != null)
                {
                    hash = hash * 59 + ToStateProvince.GetHashCode();
                }
                if (Weight != null)
                {
                    hash = hash * 59 + Weight.GetHashCode();
                }
                if (Dimensions != null)
                {
                    hash = hash * 59 + Dimensions.GetHashCode();
                }
                if (Confirmation != null)
                {
                    hash = hash * 59 + Confirmation.GetHashCode();
                }
                if (AddressResidentialIndicator != null)
                {
                    hash = hash * 59 + AddressResidentialIndicator.GetHashCode();
                }
                if (ShipDate != null)
                {
                    hash = hash * 59 + ShipDate.GetHashCode();
                }
                return hash;
            }
        }
    }
}