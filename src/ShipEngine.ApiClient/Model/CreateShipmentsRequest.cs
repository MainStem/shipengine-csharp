/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     CreateShipmentsRequest
    /// </summary>
    [DataContract]
    public class CreateShipmentsRequest : IEquatable<CreateShipmentsRequest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CreateShipmentsRequest" /> class.
        /// </summary>
        /// <param name="shipments">Shipments.</param>
        public CreateShipmentsRequest(
            List<AddressValidatingShipment> shipments = default(List<AddressValidatingShipment>))
        {
            Shipments = shipments;
        }

        /// <summary>
        ///     Gets or Sets Shipments
        /// </summary>
        [DataMember(Name = "shipments", EmitDefaultValue = false)]
        public List<AddressValidatingShipment> Shipments { get; set; }

        /// <summary>
        ///     Returns true if CreateShipmentsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateShipmentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                Shipments == other.Shipments ||
                Shipments != null &&
                Shipments.SequenceEqual(other.Shipments);
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShipmentsRequest {\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateShipmentsRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Shipments != null)
                {
                    hash = hash * 59 + Shipments.GetHashCode();
                }
                return hash;
            }
        }
    }
}