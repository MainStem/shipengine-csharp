/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     PurchaseLabelRequest
    /// </summary>
    [DataContract]
    public class PurchaseLabelRequest : IEquatable<PurchaseLabelRequest>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets LabelFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            ///     Enum Pdf for "pdf"
            /// </summary>
            [EnumMember(Value = "pdf")] Pdf,

            /// <summary>
            ///     Enum Zpl for "zpl"
            /// </summary>
            [EnumMember(Value = "zpl")] Zpl
        }

        /// <summary>
        ///     Gets or Sets ValidateAddress
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidateAddressEnum
        {
            /// <summary>
            ///     Enum NoValidation for "noValidation"
            /// </summary>
            [EnumMember(Value = "noValidation")] NoValidation,

            /// <summary>
            ///     Enum ValidateOnly for "validateOnly"
            /// </summary>
            [EnumMember(Value = "validateOnly")] ValidateOnly,

            /// <summary>
            ///     Enum ValidateAndClean for "validateAndClean"
            /// </summary>
            [EnumMember(Value = "validateAndClean")] ValidateAndClean
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PurchaseLabelRequest" /> class.
        /// </summary>
        /// <param name="shipment">Shipment.</param>
        /// <param name="labelFormat">LabelFormat.</param>
        /// <param name="labelLayout">LabelLayout.</param>
        /// <param name="testLabel">TestLabel.</param>
        /// <param name="validateAddress">ValidateAddress.</param>
        public PurchaseLabelRequest(Shipment shipment = default(Shipment),
            LabelFormatEnum? labelFormat = default(LabelFormatEnum?), string labelLayout = default(string),
            bool? testLabel = default(bool?), ValidateAddressEnum? validateAddress = default(ValidateAddressEnum?))
        {
            Shipment = shipment;
            LabelFormat = labelFormat;
            LabelLayout = labelLayout;
            TestLabel = testLabel;
            ValidateAddress = validateAddress;
        }

        /// <summary>
        ///     Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "label_format", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }

        /// <summary>
        ///     Gets or Sets ValidateAddress
        /// </summary>
        [DataMember(Name = "validate_address", EmitDefaultValue = false)]
        public ValidateAddressEnum? ValidateAddress { get; set; }

        /// <summary>
        ///     Gets or Sets Shipment
        /// </summary>
        [DataMember(Name = "shipment", EmitDefaultValue = false)]
        public Shipment Shipment { get; set; }

        /// <summary>
        ///     Gets or Sets LabelLayout
        /// </summary>
        [DataMember(Name = "label_layout", EmitDefaultValue = false)]
        public string LabelLayout { get; set; }

        /// <summary>
        ///     Gets or Sets TestLabel
        /// </summary>
        [DataMember(Name = "test_label", EmitDefaultValue = false)]
        public bool? TestLabel { get; set; }

        /// <summary>
        ///     Returns true if PurchaseLabelRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseLabelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseLabelRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Equals(Shipment, other.Shipment) ||
                    Shipment != null &&
                    Shipment.Equals(other.Shipment)
                ) &&
                (
                    LabelFormat == other.LabelFormat ||
                    LabelFormat != null &&
                    LabelFormat.Equals(other.LabelFormat)
                ) &&
                (
                    LabelLayout == other.LabelLayout ||
                    LabelLayout != null &&
                    LabelLayout.Equals(other.LabelLayout)
                ) &&
                (
                    TestLabel == other.TestLabel ||
                    TestLabel != null &&
                    TestLabel.Equals(other.TestLabel)
                ) &&
                (
                    ValidateAddress == other.ValidateAddress ||
                    ValidateAddress != null &&
                    ValidateAddress.Equals(other.ValidateAddress)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseLabelRequest {\n");
            sb.Append("  Shipment: ").Append(Shipment).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  LabelLayout: ").Append(LabelLayout).Append("\n");
            sb.Append("  TestLabel: ").Append(TestLabel).Append("\n");
            sb.Append("  ValidateAddress: ").Append(ValidateAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as PurchaseLabelRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Shipment != null)
                {
                    hash = hash * 59 + Shipment.GetHashCode();
                }
                if (LabelFormat != null)
                {
                    hash = hash * 59 + LabelFormat.GetHashCode();
                }
                if (LabelLayout != null)
                {
                    hash = hash * 59 + LabelLayout.GetHashCode();
                }
                if (TestLabel != null)
                {
                    hash = hash * 59 + TestLabel.GetHashCode();
                }
                if (ValidateAddress != null)
                {
                    hash = hash * 59 + ValidateAddress.GetHashCode();
                }
                return hash;
            }
        }
    }
}