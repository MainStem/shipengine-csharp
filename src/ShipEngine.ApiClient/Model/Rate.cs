/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Rate
    /// </summary>
    [DataContract]
    public class Rate : IEquatable<Rate>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets RateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RateTypeEnum
        {
            /// <summary>
            ///     Enum Check for "check"
            /// </summary>
            [EnumMember(Value = "check")] Check,

            /// <summary>
            ///     Enum Shipment for "shipment"
            /// </summary>
            [EnumMember(Value = "shipment")] Shipment
        }

        /// <summary>
        ///     Gets or Sets ValidationStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationStatusEnum
        {
            /// <summary>
            ///     Enum Valid for "valid"
            /// </summary>
            [EnumMember(Value = "valid")] Valid,

            /// <summary>
            ///     Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")] Invalid,

            /// <summary>
            ///     Enum Haswarnings for "has_warnings"
            /// </summary>
            [EnumMember(Value = "has_warnings")] Haswarnings,

            /// <summary>
            ///     Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")] Unknown
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Rate" /> class.
        /// </summary>
        /// <param name="rateId">RateId.</param>
        /// <param name="rateType">RateType.</param>
        /// <param name="carrierId">CarrierId.</param>
        /// <param name="shippingAmount">ShippingAmount.</param>
        /// <param name="insuranceAmount">InsuranceAmount.</param>
        /// <param name="confirmationAmount">ConfirmationAmount.</param>
        /// <param name="otherAmount">OtherAmount.</param>
        /// <param name="zone">Zone.</param>
        /// <param name="packageType">PackageType.</param>
        /// <param name="deliveryDays">DeliveryDays.</param>
        /// <param name="guaranteedService">GuaranteedService.</param>
        /// <param name="estimatedDeliveryDate">EstimatedDeliveryDate.</param>
        /// <param name="carrierDeliveryDays">CarrierDeliveryDays.</param>
        /// <param name="shipDate">ShipDate.</param>
        /// <param name="negotiatedRate">NegotiatedRate.</param>
        /// <param name="serviceType">ServiceType.</param>
        /// <param name="serviceCode">ServiceCode.</param>
        /// <param name="trackable">Trackable.</param>
        /// <param name="validationStatus">ValidationStatus.</param>
        /// <param name="warningMessages">WarningMessages.</param>
        /// <param name="errorMessages">ErrorMessages.</param>
        /// <param name="carrierCode">CarrierCode.</param>
        /// <param name="carrierNickname">CarrierNickname.</param>
        /// <param name="carrierFriendlyName">CarrierFriendlyName.</param>
        public Rate(string rateId = default(string), RateTypeEnum? rateType = default(RateTypeEnum?),
            string carrierId = default(string), MoneyDTO shippingAmount = default(MoneyDTO),
            MoneyDTO insuranceAmount = default(MoneyDTO), MoneyDTO confirmationAmount = default(MoneyDTO),
            MoneyDTO otherAmount = default(MoneyDTO), int? zone = default(int?), string packageType = default(string),
            int? deliveryDays = default(int?), bool? guaranteedService = default(bool?),
            DateTime? estimatedDeliveryDate = default(DateTime?), string carrierDeliveryDays = default(string),
            DateTime? shipDate = default(DateTime?), bool? negotiatedRate = default(bool?),
            string serviceType = default(string), string serviceCode = default(string), bool? trackable = default(bool?),
            ValidationStatusEnum? validationStatus = default(ValidationStatusEnum?),
            List<string> warningMessages = default(List<string>), List<string> errorMessages = default(List<string>),
            string carrierCode = default(string), string carrierNickname = default(string),
            string carrierFriendlyName = default(string))
        {
            RateId = rateId;
            RateType = rateType;
            CarrierId = carrierId;
            ShippingAmount = shippingAmount;
            InsuranceAmount = insuranceAmount;
            ConfirmationAmount = confirmationAmount;
            OtherAmount = otherAmount;
            Zone = zone;
            PackageType = packageType;
            DeliveryDays = deliveryDays;
            GuaranteedService = guaranteedService;
            EstimatedDeliveryDate = estimatedDeliveryDate;
            CarrierDeliveryDays = carrierDeliveryDays;
            ShipDate = shipDate;
            NegotiatedRate = negotiatedRate;
            ServiceType = serviceType;
            ServiceCode = serviceCode;
            Trackable = trackable;
            ValidationStatus = validationStatus;
            WarningMessages = warningMessages;
            ErrorMessages = errorMessages;
            CarrierCode = carrierCode;
            CarrierNickname = carrierNickname;
            CarrierFriendlyName = carrierFriendlyName;
        }

        /// <summary>
        ///     Gets or Sets RateType
        /// </summary>
        [DataMember(Name = "rate_type", EmitDefaultValue = false)]
        public RateTypeEnum? RateType { get; set; }

        /// <summary>
        ///     Gets or Sets ValidationStatus
        /// </summary>
        [DataMember(Name = "validation_status", EmitDefaultValue = false)]
        public ValidationStatusEnum? ValidationStatus { get; set; }

        /// <summary>
        ///     Gets or Sets RateId
        /// </summary>
        [DataMember(Name = "rate_id", EmitDefaultValue = false)]
        public string RateId { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets ShippingAmount
        /// </summary>
        [DataMember(Name = "shipping_amount", EmitDefaultValue = false)]
        public MoneyDTO ShippingAmount { get; set; }

        /// <summary>
        ///     Gets or Sets InsuranceAmount
        /// </summary>
        [DataMember(Name = "insurance_amount", EmitDefaultValue = false)]
        public MoneyDTO InsuranceAmount { get; set; }

        /// <summary>
        ///     Gets or Sets ConfirmationAmount
        /// </summary>
        [DataMember(Name = "confirmation_amount", EmitDefaultValue = false)]
        public MoneyDTO ConfirmationAmount { get; set; }

        /// <summary>
        ///     Gets or Sets OtherAmount
        /// </summary>
        [DataMember(Name = "other_amount", EmitDefaultValue = false)]
        public MoneyDTO OtherAmount { get; set; }

        /// <summary>
        ///     Gets or Sets Zone
        /// </summary>
        [DataMember(Name = "zone", EmitDefaultValue = false)]
        public int? Zone { get; set; }

        /// <summary>
        ///     Gets or Sets PackageType
        /// </summary>
        [DataMember(Name = "package_type", EmitDefaultValue = false)]
        public string PackageType { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryDays
        /// </summary>
        [DataMember(Name = "delivery_days", EmitDefaultValue = false)]
        public int? DeliveryDays { get; set; }

        /// <summary>
        ///     Gets or Sets GuaranteedService
        /// </summary>
        [DataMember(Name = "guaranteed_service", EmitDefaultValue = false)]
        public bool? GuaranteedService { get; set; }

        /// <summary>
        ///     Gets or Sets EstimatedDeliveryDate
        /// </summary>
        [DataMember(Name = "estimated_delivery_date", EmitDefaultValue = false)]
        public DateTime? EstimatedDeliveryDate { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierDeliveryDays
        /// </summary>
        [DataMember(Name = "carrier_delivery_days", EmitDefaultValue = false)]
        public string CarrierDeliveryDays { get; set; }

        /// <summary>
        ///     Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "ship_date", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        ///     Gets or Sets NegotiatedRate
        /// </summary>
        [DataMember(Name = "negotiated_rate", EmitDefaultValue = false)]
        public bool? NegotiatedRate { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name = "service_type", EmitDefaultValue = false)]
        public string ServiceType { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceCode
        /// </summary>
        [DataMember(Name = "service_code", EmitDefaultValue = false)]
        public string ServiceCode { get; set; }

        /// <summary>
        ///     Gets or Sets Trackable
        /// </summary>
        [DataMember(Name = "trackable", EmitDefaultValue = false)]
        public bool? Trackable { get; set; }

        /// <summary>
        ///     Gets or Sets WarningMessages
        /// </summary>
        [DataMember(Name = "warning_messages", EmitDefaultValue = false)]
        public List<string> WarningMessages { get; set; }

        /// <summary>
        ///     Gets or Sets ErrorMessages
        /// </summary>
        [DataMember(Name = "error_messages", EmitDefaultValue = false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierNickname
        /// </summary>
        [DataMember(Name = "carrier_nickname", EmitDefaultValue = false)]
        public string CarrierNickname { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierFriendlyName
        /// </summary>
        [DataMember(Name = "carrier_friendly_name", EmitDefaultValue = false)]
        public string CarrierFriendlyName { get; set; }

        /// <summary>
        ///     Returns true if Rate instances are equal
        /// </summary>
        /// <param name="other">Instance of Rate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    RateId == other.RateId ||
                    RateId != null &&
                    RateId.Equals(other.RateId)
                ) &&
                (
                    RateType == other.RateType ||
                    RateType != null &&
                    RateType.Equals(other.RateType)
                ) &&
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    Equals(ShippingAmount, other.ShippingAmount) ||
                    ShippingAmount != null &&
                    ShippingAmount.Equals(other.ShippingAmount)
                ) &&
                (
                    Equals(InsuranceAmount, other.InsuranceAmount) ||
                    InsuranceAmount != null &&
                    InsuranceAmount.Equals(other.InsuranceAmount)
                ) &&
                (
                    Equals(ConfirmationAmount, other.ConfirmationAmount) ||
                    ConfirmationAmount != null &&
                    ConfirmationAmount.Equals(other.ConfirmationAmount)
                ) &&
                (
                    Equals(OtherAmount, other.OtherAmount) ||
                    OtherAmount != null &&
                    OtherAmount.Equals(other.OtherAmount)
                ) &&
                (
                    Zone == other.Zone ||
                    Zone != null &&
                    Zone.Equals(other.Zone)
                ) &&
                (
                    PackageType == other.PackageType ||
                    PackageType != null &&
                    PackageType.Equals(other.PackageType)
                ) &&
                (
                    DeliveryDays == other.DeliveryDays ||
                    DeliveryDays != null &&
                    DeliveryDays.Equals(other.DeliveryDays)
                ) &&
                (
                    GuaranteedService == other.GuaranteedService ||
                    GuaranteedService != null &&
                    GuaranteedService.Equals(other.GuaranteedService)
                ) &&
                (
                    EstimatedDeliveryDate == other.EstimatedDeliveryDate ||
                    EstimatedDeliveryDate != null &&
                    EstimatedDeliveryDate.Equals(other.EstimatedDeliveryDate)
                ) &&
                (
                    CarrierDeliveryDays == other.CarrierDeliveryDays ||
                    CarrierDeliveryDays != null &&
                    CarrierDeliveryDays.Equals(other.CarrierDeliveryDays)
                ) &&
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) &&
                (
                    NegotiatedRate == other.NegotiatedRate ||
                    NegotiatedRate != null &&
                    NegotiatedRate.Equals(other.NegotiatedRate)
                ) &&
                (
                    ServiceType == other.ServiceType ||
                    ServiceType != null &&
                    ServiceType.Equals(other.ServiceType)
                ) &&
                (
                    ServiceCode == other.ServiceCode ||
                    ServiceCode != null &&
                    ServiceCode.Equals(other.ServiceCode)
                ) &&
                (
                    Trackable == other.Trackable ||
                    Trackable != null &&
                    Trackable.Equals(other.Trackable)
                ) &&
                (
                    ValidationStatus == other.ValidationStatus ||
                    ValidationStatus != null &&
                    ValidationStatus.Equals(other.ValidationStatus)
                ) &&
                (
                    WarningMessages == other.WarningMessages ||
                    WarningMessages != null &&
                    WarningMessages.SequenceEqual(other.WarningMessages)
                ) &&
                (
                    ErrorMessages == other.ErrorMessages ||
                    ErrorMessages != null &&
                    ErrorMessages.SequenceEqual(other.ErrorMessages)
                ) &&
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) &&
                (
                    CarrierNickname == other.CarrierNickname ||
                    CarrierNickname != null &&
                    CarrierNickname.Equals(other.CarrierNickname)
                ) &&
                (
                    CarrierFriendlyName == other.CarrierFriendlyName ||
                    CarrierFriendlyName != null &&
                    CarrierFriendlyName.Equals(other.CarrierFriendlyName)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rate {\n");
            sb.Append("  RateId: ").Append(RateId).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  ConfirmationAmount: ").Append(ConfirmationAmount).Append("\n");
            sb.Append("  OtherAmount: ").Append(OtherAmount).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  DeliveryDays: ").Append(DeliveryDays).Append("\n");
            sb.Append("  GuaranteedService: ").Append(GuaranteedService).Append("\n");
            sb.Append("  EstimatedDeliveryDate: ").Append(EstimatedDeliveryDate).Append("\n");
            sb.Append("  CarrierDeliveryDays: ").Append(CarrierDeliveryDays).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  NegotiatedRate: ").Append(NegotiatedRate).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  Trackable: ").Append(Trackable).Append("\n");
            sb.Append("  ValidationStatus: ").Append(ValidationStatus).Append("\n");
            sb.Append("  WarningMessages: ").Append(WarningMessages).Append("\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CarrierNickname: ").Append(CarrierNickname).Append("\n");
            sb.Append("  CarrierFriendlyName: ").Append(CarrierFriendlyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rate);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (RateId != null)
                {
                    hash = hash * 59 + RateId.GetHashCode();
                }
                if (RateType != null)
                {
                    hash = hash * 59 + RateType.GetHashCode();
                }
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (ShippingAmount != null)
                {
                    hash = hash * 59 + ShippingAmount.GetHashCode();
                }
                if (InsuranceAmount != null)
                {
                    hash = hash * 59 + InsuranceAmount.GetHashCode();
                }
                if (ConfirmationAmount != null)
                {
                    hash = hash * 59 + ConfirmationAmount.GetHashCode();
                }
                if (OtherAmount != null)
                {
                    hash = hash * 59 + OtherAmount.GetHashCode();
                }
                if (Zone != null)
                {
                    hash = hash * 59 + Zone.GetHashCode();
                }
                if (PackageType != null)
                {
                    hash = hash * 59 + PackageType.GetHashCode();
                }
                if (DeliveryDays != null)
                {
                    hash = hash * 59 + DeliveryDays.GetHashCode();
                }
                if (GuaranteedService != null)
                {
                    hash = hash * 59 + GuaranteedService.GetHashCode();
                }
                if (EstimatedDeliveryDate != null)
                {
                    hash = hash * 59 + EstimatedDeliveryDate.GetHashCode();
                }
                if (CarrierDeliveryDays != null)
                {
                    hash = hash * 59 + CarrierDeliveryDays.GetHashCode();
                }
                if (ShipDate != null)
                {
                    hash = hash * 59 + ShipDate.GetHashCode();
                }
                if (NegotiatedRate != null)
                {
                    hash = hash * 59 + NegotiatedRate.GetHashCode();
                }
                if (ServiceType != null)
                {
                    hash = hash * 59 + ServiceType.GetHashCode();
                }
                if (ServiceCode != null)
                {
                    hash = hash * 59 + ServiceCode.GetHashCode();
                }
                if (Trackable != null)
                {
                    hash = hash * 59 + Trackable.GetHashCode();
                }
                if (ValidationStatus != null)
                {
                    hash = hash * 59 + ValidationStatus.GetHashCode();
                }
                if (WarningMessages != null)
                {
                    hash = hash * 59 + WarningMessages.GetHashCode();
                }
                if (ErrorMessages != null)
                {
                    hash = hash * 59 + ErrorMessages.GetHashCode();
                }
                if (CarrierCode != null)
                {
                    hash = hash * 59 + CarrierCode.GetHashCode();
                }
                if (CarrierNickname != null)
                {
                    hash = hash * 59 + CarrierNickname.GetHashCode();
                }
                if (CarrierFriendlyName != null)
                {
                    hash = hash * 59 + CarrierFriendlyName.GetHashCode();
                }
                return hash;
            }
        }
    }
}