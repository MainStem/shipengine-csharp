/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Batch
    /// </summary>
    [DataContract]
    public class Batch : IEquatable<Batch>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum Open for "open"
            /// </summary>
            [EnumMember(Value = "open")] Open,

            /// <summary>
            ///     Enum Queued for "queued"
            /// </summary>
            [EnumMember(Value = "queued")] Queued,

            /// <summary>
            ///     Enum Processing for "processing"
            /// </summary>
            [EnumMember(Value = "processing")] Processing,

            /// <summary>
            ///     Enum Completed for "completed"
            /// </summary>
            [EnumMember(Value = "completed")] Completed,

            /// <summary>
            ///     Enum Completedwitherrors for "completed_with_errors"
            /// </summary>
            [EnumMember(Value = "completed_with_errors")] Completedwitherrors,

            /// <summary>
            ///     Enum Archived for "archived"
            /// </summary>
            [EnumMember(Value = "archived")] Archived,

            /// <summary>
            ///     Enum Notifying for "notifying"
            /// </summary>
            [EnumMember(Value = "notifying")] Notifying,

            /// <summary>
            ///     Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")] Invalid
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Batch" /> class.
        /// </summary>
        /// <param name="batchId">BatchId.</param>
        /// <param name="externalBatchId">ExternalBatchId.</param>
        /// <param name="batchNotes">BatchNotes.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="processedAt">ProcessedAt.</param>
        /// <param name="errors">Errors.</param>
        /// <param name="warnings">Warnings.</param>
        /// <param name="completed">Completed.</param>
        /// <param name="forms">Forms.</param>
        /// <param name="count">Count.</param>
        /// <param name="batchShipmentsUrl">BatchShipmentsUrl.</param>
        /// <param name="batchLabelsUrl">BatchLabelsUrl.</param>
        /// <param name="batchErrorsUrl">BatchErrorsUrl.</param>
        /// <param name="labelDownload">LabelDownload.</param>
        /// <param name="formDownload">FormDownload.</param>
        /// <param name="status">Status.</param>
        public Batch(string batchId = default(string), string externalBatchId = default(string),
            string batchNotes = default(string), DateTime? createdAt = default(DateTime?),
            DateTime? processedAt = default(DateTime?), int? errors = default(int?), int? warnings = default(int?),
            int? completed = default(int?), int? forms = default(int?), int? count = default(int?),
            LinkDTO batchShipmentsUrl = default(LinkDTO), LinkDTO batchLabelsUrl = default(LinkDTO),
            LinkDTO batchErrorsUrl = default(LinkDTO), LinkDTO labelDownload = default(LinkDTO),
            LinkDTO formDownload = default(LinkDTO), StatusEnum? status = default(StatusEnum?))
        {
            BatchId = batchId;
            ExternalBatchId = externalBatchId;
            BatchNotes = batchNotes;
            CreatedAt = createdAt;
            ProcessedAt = processedAt;
            Errors = errors;
            Warnings = warnings;
            Completed = completed;
            Forms = forms;
            Count = count;
            BatchShipmentsUrl = batchShipmentsUrl;
            BatchLabelsUrl = batchLabelsUrl;
            BatchErrorsUrl = batchErrorsUrl;
            LabelDownload = labelDownload;
            FormDownload = formDownload;
            Status = status;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        ///     Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        ///     Gets or Sets ExternalBatchId
        /// </summary>
        [DataMember(Name = "external_batch_id", EmitDefaultValue = false)]
        public string ExternalBatchId { get; set; }

        /// <summary>
        ///     Gets or Sets BatchNotes
        /// </summary>
        [DataMember(Name = "batch_notes", EmitDefaultValue = false)]
        public string BatchNotes { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets ProcessedAt
        /// </summary>
        [DataMember(Name = "processed_at", EmitDefaultValue = false)]
        public DateTime? ProcessedAt { get; set; }

        /// <summary>
        ///     Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public int? Errors { get; set; }

        /// <summary>
        ///     Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public int? Warnings { get; set; }

        /// <summary>
        ///     Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", EmitDefaultValue = false)]
        public int? Completed { get; set; }

        /// <summary>
        ///     Gets or Sets Forms
        /// </summary>
        [DataMember(Name = "forms", EmitDefaultValue = false)]
        public int? Forms { get; set; }

        /// <summary>
        ///     Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int? Count { get; set; }

        /// <summary>
        ///     Gets or Sets BatchShipmentsUrl
        /// </summary>
        [DataMember(Name = "batch_shipments_url", EmitDefaultValue = false)]
        public LinkDTO BatchShipmentsUrl { get; set; }

        /// <summary>
        ///     Gets or Sets BatchLabelsUrl
        /// </summary>
        [DataMember(Name = "batch_labels_url", EmitDefaultValue = false)]
        public LinkDTO BatchLabelsUrl { get; set; }

        /// <summary>
        ///     Gets or Sets BatchErrorsUrl
        /// </summary>
        [DataMember(Name = "batch_errors_url", EmitDefaultValue = false)]
        public LinkDTO BatchErrorsUrl { get; set; }

        /// <summary>
        ///     Gets or Sets LabelDownload
        /// </summary>
        [DataMember(Name = "label_download", EmitDefaultValue = false)]
        public LinkDTO LabelDownload { get; set; }

        /// <summary>
        ///     Gets or Sets FormDownload
        /// </summary>
        [DataMember(Name = "form_download", EmitDefaultValue = false)]
        public LinkDTO FormDownload { get; set; }

        /// <summary>
        ///     Returns true if Batch instances are equal
        /// </summary>
        /// <param name="other">Instance of Batch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Batch other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) &&
                (
                    ExternalBatchId == other.ExternalBatchId ||
                    ExternalBatchId != null &&
                    ExternalBatchId.Equals(other.ExternalBatchId)
                ) &&
                (
                    BatchNotes == other.BatchNotes ||
                    BatchNotes != null &&
                    BatchNotes.Equals(other.BatchNotes)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    ProcessedAt == other.ProcessedAt ||
                    ProcessedAt != null &&
                    ProcessedAt.Equals(other.ProcessedAt)
                ) &&
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.Equals(other.Errors)
                ) &&
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.Equals(other.Warnings)
                ) &&
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                ) &&
                (
                    Forms == other.Forms ||
                    Forms != null &&
                    Forms.Equals(other.Forms)
                ) &&
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                ) &&
                (
                    Equals(BatchShipmentsUrl, other.BatchShipmentsUrl) ||
                    BatchShipmentsUrl != null &&
                    BatchShipmentsUrl.Equals(other.BatchShipmentsUrl)
                ) &&
                (
                    Equals(BatchLabelsUrl, other.BatchLabelsUrl) ||
                    BatchLabelsUrl != null &&
                    BatchLabelsUrl.Equals(other.BatchLabelsUrl)
                ) &&
                (
                    Equals(BatchErrorsUrl, other.BatchErrorsUrl) ||
                    BatchErrorsUrl != null &&
                    BatchErrorsUrl.Equals(other.BatchErrorsUrl)
                ) &&
                (
                    Equals(LabelDownload, other.LabelDownload) ||
                    LabelDownload != null &&
                    LabelDownload.Equals(other.LabelDownload)
                ) &&
                (
                    Equals(FormDownload, other.FormDownload) ||
                    FormDownload != null &&
                    FormDownload.Equals(other.FormDownload)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Batch {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  ExternalBatchId: ").Append(ExternalBatchId).Append("\n");
            sb.Append("  BatchNotes: ").Append(BatchNotes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ProcessedAt: ").Append(ProcessedAt).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  BatchShipmentsUrl: ").Append(BatchShipmentsUrl).Append("\n");
            sb.Append("  BatchLabelsUrl: ").Append(BatchLabelsUrl).Append("\n");
            sb.Append("  BatchErrorsUrl: ").Append(BatchErrorsUrl).Append("\n");
            sb.Append("  LabelDownload: ").Append(LabelDownload).Append("\n");
            sb.Append("  FormDownload: ").Append(FormDownload).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Batch);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (BatchId != null)
                {
                    hash = hash * 59 + BatchId.GetHashCode();
                }
                if (ExternalBatchId != null)
                {
                    hash = hash * 59 + ExternalBatchId.GetHashCode();
                }
                if (BatchNotes != null)
                {
                    hash = hash * 59 + BatchNotes.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (ProcessedAt != null)
                {
                    hash = hash * 59 + ProcessedAt.GetHashCode();
                }
                if (Errors != null)
                {
                    hash = hash * 59 + Errors.GetHashCode();
                }
                if (Warnings != null)
                {
                    hash = hash * 59 + Warnings.GetHashCode();
                }
                if (Completed != null)
                {
                    hash = hash * 59 + Completed.GetHashCode();
                }
                if (Forms != null)
                {
                    hash = hash * 59 + Forms.GetHashCode();
                }
                if (Count != null)
                {
                    hash = hash * 59 + Count.GetHashCode();
                }
                if (BatchShipmentsUrl != null)
                {
                    hash = hash * 59 + BatchShipmentsUrl.GetHashCode();
                }
                if (BatchLabelsUrl != null)
                {
                    hash = hash * 59 + BatchLabelsUrl.GetHashCode();
                }
                if (BatchErrorsUrl != null)
                {
                    hash = hash * 59 + BatchErrorsUrl.GetHashCode();
                }
                if (LabelDownload != null)
                {
                    hash = hash * 59 + LabelDownload.GetHashCode();
                }
                if (FormDownload != null)
                {
                    hash = hash * 59 + FormDownload.GetHashCode();
                }
                if (Status != null)
                {
                    hash = hash * 59 + Status.GetHashCode();
                }
                return hash;
            }
        }
    }
}