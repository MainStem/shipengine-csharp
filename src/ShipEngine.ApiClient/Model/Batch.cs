/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// Batch
    /// </summary>
    [DataContract]
    public partial class Batch :  IEquatable<Batch>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            
            /// <summary>
            /// Enum Pdf for "pdf"
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf = 1,
            
            /// <summary>
            /// Enum Zpl for "zpl"
            /// </summary>
            [EnumMember(Value = "zpl")]
            Zpl = 2,
            
            /// <summary>
            /// Enum Png for "png"
            /// </summary>
            [EnumMember(Value = "png")]
            Png = 3
        }

        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name="label_format", EmitDefaultValue=false)]
        public LabelFormatEnum? LabelFormat { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Open for "open"
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,
            
            /// <summary>
            /// Enum Queued for "queued"
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 2,
            
            /// <summary>
            /// Enum Processing for "processing"
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3,
            
            /// <summary>
            /// Enum Completed for "completed"
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 4,
            
            /// <summary>
            /// Enum Completedwitherrors for "completed_with_errors"
            /// </summary>
            [EnumMember(Value = "completed_with_errors")]
            Completedwitherrors = 5,
            
            /// <summary>
            /// Enum Archived for "archived"
            /// </summary>
            [EnumMember(Value = "archived")]
            Archived = 6,
            
            /// <summary>
            /// Enum Notifying for "notifying"
            /// </summary>
            [EnumMember(Value = "notifying")]
            Notifying = 7,
            
            /// <summary>
            /// Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 8
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Batch" /> class.
        /// </summary>
        /// <param name="LabelLayout">LabelLayout.</param>
        /// <param name="LabelFormat">LabelFormat.</param>
        /// <param name="BatchId">BatchId.</param>
        /// <param name="ExternalBatchId">ExternalBatchId.</param>
        /// <param name="BatchNotes">BatchNotes.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="ProcessedAt">ProcessedAt.</param>
        /// <param name="Errors">Errors.</param>
        /// <param name="Warnings">Warnings.</param>
        /// <param name="Completed">Completed.</param>
        /// <param name="Forms">Forms.</param>
        /// <param name="Count">Count.</param>
        /// <param name="BatchShipmentsUrl">BatchShipmentsUrl.</param>
        /// <param name="BatchLabelsUrl">BatchLabelsUrl.</param>
        /// <param name="BatchErrorsUrl">BatchErrorsUrl.</param>
        /// <param name="LabelDownload">LabelDownload.</param>
        /// <param name="FormDownload">FormDownload.</param>
        /// <param name="Status">Status.</param>
        public Batch(string LabelLayout = default(string), LabelFormatEnum? LabelFormat = default(LabelFormatEnum?), string BatchId = default(string), string ExternalBatchId = default(string), string BatchNotes = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? ProcessedAt = default(DateTime?), int? Errors = default(int?), int? Warnings = default(int?), int? Completed = default(int?), int? Forms = default(int?), int? Count = default(int?), LinkDTO BatchShipmentsUrl = default(LinkDTO), LinkDTO BatchLabelsUrl = default(LinkDTO), LinkDTO BatchErrorsUrl = default(LinkDTO), LinkDTO LabelDownload = default(LinkDTO), LinkDTO FormDownload = default(LinkDTO), StatusEnum? Status = default(StatusEnum?))
        {
            this.LabelLayout = LabelLayout;
            this.LabelFormat = LabelFormat;
            this.BatchId = BatchId;
            this.ExternalBatchId = ExternalBatchId;
            this.BatchNotes = BatchNotes;
            this.CreatedAt = CreatedAt;
            this.ProcessedAt = ProcessedAt;
            this.Errors = Errors;
            this.Warnings = Warnings;
            this.Completed = Completed;
            this.Forms = Forms;
            this.Count = Count;
            this.BatchShipmentsUrl = BatchShipmentsUrl;
            this.BatchLabelsUrl = BatchLabelsUrl;
            this.BatchErrorsUrl = BatchErrorsUrl;
            this.LabelDownload = LabelDownload;
            this.FormDownload = FormDownload;
            this.Status = Status;
        }
        
        /// <summary>
        /// Gets or Sets LabelLayout
        /// </summary>
        [DataMember(Name="label_layout", EmitDefaultValue=false)]
        public string LabelLayout { get; set; }


        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="batch_id", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalBatchId
        /// </summary>
        [DataMember(Name="external_batch_id", EmitDefaultValue=false)]
        public string ExternalBatchId { get; set; }

        /// <summary>
        /// Gets or Sets BatchNotes
        /// </summary>
        [DataMember(Name="batch_notes", EmitDefaultValue=false)]
        public string BatchNotes { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedAt
        /// </summary>
        [DataMember(Name="processed_at", EmitDefaultValue=false)]
        public DateTime? ProcessedAt { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public int? Errors { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public int? Warnings { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public int? Completed { get; set; }

        /// <summary>
        /// Gets or Sets Forms
        /// </summary>
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public int? Forms { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets BatchShipmentsUrl
        /// </summary>
        [DataMember(Name="batch_shipments_url", EmitDefaultValue=false)]
        public LinkDTO BatchShipmentsUrl { get; set; }

        /// <summary>
        /// Gets or Sets BatchLabelsUrl
        /// </summary>
        [DataMember(Name="batch_labels_url", EmitDefaultValue=false)]
        public LinkDTO BatchLabelsUrl { get; set; }

        /// <summary>
        /// Gets or Sets BatchErrorsUrl
        /// </summary>
        [DataMember(Name="batch_errors_url", EmitDefaultValue=false)]
        public LinkDTO BatchErrorsUrl { get; set; }

        /// <summary>
        /// Gets or Sets LabelDownload
        /// </summary>
        [DataMember(Name="label_download", EmitDefaultValue=false)]
        public LinkDTO LabelDownload { get; set; }

        /// <summary>
        /// Gets or Sets FormDownload
        /// </summary>
        [DataMember(Name="form_download", EmitDefaultValue=false)]
        public LinkDTO FormDownload { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Batch {\n");
            sb.Append("  LabelLayout: ").Append(LabelLayout).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  ExternalBatchId: ").Append(ExternalBatchId).Append("\n");
            sb.Append("  BatchNotes: ").Append(BatchNotes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ProcessedAt: ").Append(ProcessedAt).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  BatchShipmentsUrl: ").Append(BatchShipmentsUrl).Append("\n");
            sb.Append("  BatchLabelsUrl: ").Append(BatchLabelsUrl).Append("\n");
            sb.Append("  BatchErrorsUrl: ").Append(BatchErrorsUrl).Append("\n");
            sb.Append("  LabelDownload: ").Append(LabelDownload).Append("\n");
            sb.Append("  FormDownload: ").Append(FormDownload).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Batch);
        }

        /// <summary>
        /// Returns true if Batch instances are equal
        /// </summary>
        /// <param name="input">Instance of Batch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Batch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LabelLayout == input.LabelLayout ||
                    (this.LabelLayout != null &&
                    this.LabelLayout.Equals(input.LabelLayout))
                ) && 
                (
                    this.LabelFormat == input.LabelFormat ||
                    (this.LabelFormat != null &&
                    this.LabelFormat.Equals(input.LabelFormat))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.ExternalBatchId == input.ExternalBatchId ||
                    (this.ExternalBatchId != null &&
                    this.ExternalBatchId.Equals(input.ExternalBatchId))
                ) && 
                (
                    this.BatchNotes == input.BatchNotes ||
                    (this.BatchNotes != null &&
                    this.BatchNotes.Equals(input.BatchNotes))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ProcessedAt == input.ProcessedAt ||
                    (this.ProcessedAt != null &&
                    this.ProcessedAt.Equals(input.ProcessedAt))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    (this.Warnings != null &&
                    this.Warnings.Equals(input.Warnings))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.Forms == input.Forms ||
                    (this.Forms != null &&
                    this.Forms.Equals(input.Forms))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.BatchShipmentsUrl == input.BatchShipmentsUrl ||
                    (this.BatchShipmentsUrl != null &&
                    this.BatchShipmentsUrl.Equals(input.BatchShipmentsUrl))
                ) && 
                (
                    this.BatchLabelsUrl == input.BatchLabelsUrl ||
                    (this.BatchLabelsUrl != null &&
                    this.BatchLabelsUrl.Equals(input.BatchLabelsUrl))
                ) && 
                (
                    this.BatchErrorsUrl == input.BatchErrorsUrl ||
                    (this.BatchErrorsUrl != null &&
                    this.BatchErrorsUrl.Equals(input.BatchErrorsUrl))
                ) && 
                (
                    this.LabelDownload == input.LabelDownload ||
                    (this.LabelDownload != null &&
                    this.LabelDownload.Equals(input.LabelDownload))
                ) && 
                (
                    this.FormDownload == input.FormDownload ||
                    (this.FormDownload != null &&
                    this.FormDownload.Equals(input.FormDownload))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LabelLayout != null)
                    hashCode = hashCode * 59 + this.LabelLayout.GetHashCode();
                if (this.LabelFormat != null)
                    hashCode = hashCode * 59 + this.LabelFormat.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.ExternalBatchId != null)
                    hashCode = hashCode * 59 + this.ExternalBatchId.GetHashCode();
                if (this.BatchNotes != null)
                    hashCode = hashCode * 59 + this.BatchNotes.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ProcessedAt != null)
                    hashCode = hashCode * 59 + this.ProcessedAt.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.Forms != null)
                    hashCode = hashCode * 59 + this.Forms.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.BatchShipmentsUrl != null)
                    hashCode = hashCode * 59 + this.BatchShipmentsUrl.GetHashCode();
                if (this.BatchLabelsUrl != null)
                    hashCode = hashCode * 59 + this.BatchLabelsUrl.GetHashCode();
                if (this.BatchErrorsUrl != null)
                    hashCode = hashCode * 59 + this.BatchErrorsUrl.GetHashCode();
                if (this.LabelDownload != null)
                    hashCode = hashCode * 59 + this.LabelDownload.GetHashCode();
                if (this.FormDownload != null)
                    hashCode = hashCode * 59 + this.FormDownload.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
