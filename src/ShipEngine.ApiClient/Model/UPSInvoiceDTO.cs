/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// UPSInvoiceDTO
    /// </summary>
    [DataContract]
    public partial class UPSInvoiceDTO :  IEquatable<UPSInvoiceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UPSInvoiceDTO" /> class.
        /// </summary>
        /// <param name="InvoiceDate">InvoiceDate.</param>
        /// <param name="InvoiceNumber">InvoiceNumber.</param>
        /// <param name="ControlId">ControlId.</param>
        /// <param name="InvoiceAmount">InvoiceAmount.</param>
        public UPSInvoiceDTO(DateTime? InvoiceDate = default(DateTime?), string InvoiceNumber = default(string), string ControlId = default(string), double? InvoiceAmount = default(double?))
        {
            this.InvoiceDate = InvoiceDate;
            this.InvoiceNumber = InvoiceNumber;
            this.ControlId = ControlId;
            this.InvoiceAmount = InvoiceAmount;
        }
        
        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="invoice_date", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoice_number", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ControlId
        /// </summary>
        [DataMember(Name="control_id", EmitDefaultValue=false)]
        public string ControlId { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAmount
        /// </summary>
        [DataMember(Name="invoice_amount", EmitDefaultValue=false)]
        public double? InvoiceAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UPSInvoiceDTO {\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  ControlId: ").Append(ControlId).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UPSInvoiceDTO);
        }

        /// <summary>
        /// Returns true if UPSInvoiceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UPSInvoiceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UPSInvoiceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.ControlId == input.ControlId ||
                    (this.ControlId != null &&
                    this.ControlId.Equals(input.ControlId))
                ) && 
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.ControlId != null)
                    hashCode = hashCode * 59 + this.ControlId.GetHashCode();
                if (this.InvoiceAmount != null)
                    hashCode = hashCode * 59 + this.InvoiceAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
