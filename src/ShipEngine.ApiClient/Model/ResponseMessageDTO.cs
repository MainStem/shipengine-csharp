/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     ResponseMessageDTO
    /// </summary>
    [DataContract]
    public class ResponseMessageDTO : IEquatable<ResponseMessageDTO>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Code
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            ///     Enum A1000 for "a1000"
            /// </summary>
            [EnumMember(Value = "a1000")] A1000,

            /// <summary>
            ///     Enum A1001 for "a1001"
            /// </summary>
            [EnumMember(Value = "a1001")] A1001,

            /// <summary>
            ///     Enum A1002 for "a1002"
            /// </summary>
            [EnumMember(Value = "a1002")] A1002,

            /// <summary>
            ///     Enum A1003 for "a1003"
            /// </summary>
            [EnumMember(Value = "a1003")] A1003,

            /// <summary>
            ///     Enum A1004 for "a1004"
            /// </summary>
            [EnumMember(Value = "a1004")] A1004,

            /// <summary>
            ///     Enum A1005 for "a1005"
            /// </summary>
            [EnumMember(Value = "a1005")] A1005,

            /// <summary>
            ///     Enum A1006 for "a1006"
            /// </summary>
            [EnumMember(Value = "a1006")] A1006,

            /// <summary>
            ///     Enum R1000 for "r1000"
            /// </summary>
            [EnumMember(Value = "r1000")] R1000,

            /// <summary>
            ///     Enum R1001 for "r1001"
            /// </summary>
            [EnumMember(Value = "r1001")] R1001,

            /// <summary>
            ///     Enum R1002 for "r1002"
            /// </summary>
            [EnumMember(Value = "r1002")] R1002,

            /// <summary>
            ///     Enum R1003 for "r1003"
            /// </summary>
            [EnumMember(Value = "r1003")] R1003
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            ///     Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")] Error,

            /// <summary>
            ///     Enum Warning for "warning"
            /// </summary>
            [EnumMember(Value = "warning")] Warning,

            /// <summary>
            ///     Enum Info for "info"
            /// </summary>
            [EnumMember(Value = "info")] Info
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ResponseMessageDTO" /> class.
        /// </summary>
        /// <param name="code">Code.</param>
        /// <param name="message">Message.</param>
        /// <param name="type">Type.</param>
        public ResponseMessageDTO(CodeEnum? code = default(CodeEnum?), string message = default(string),
            TypeEnum? type = default(TypeEnum?))
        {
            Code = code;
            Message = message;
            Type = type;
        }

        /// <summary>
        ///     Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public CodeEnum? Code { get; set; }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        ///     Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        ///     Returns true if ResponseMessageDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseMessageDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseMessageDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) &&
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseMessageDTO {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as ResponseMessageDTO);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Code != null)
                {
                    hash = hash * 59 + Code.GetHashCode();
                }
                if (Message != null)
                {
                    hash = hash * 59 + Message.GetHashCode();
                }
                if (Type != null)
                {
                    hash = hash * 59 + Type.GetHashCode();
                }
                return hash;
            }
        }
    }
}