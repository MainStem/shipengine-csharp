/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     RateShipmentResponse
    /// </summary>
    [DataContract]
    public class RateShipmentResponse : IEquatable<RateShipmentResponse>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Confirmation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfirmationEnum
        {
            /// <summary>
            ///     Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")] None,

            /// <summary>
            ///     Enum Delivery for "delivery"
            /// </summary>
            [EnumMember(Value = "delivery")] Delivery,

            /// <summary>
            ///     Enum Signature for "signature"
            /// </summary>
            [EnumMember(Value = "signature")] Signature,

            /// <summary>
            ///     Enum Adultsignature for "adult_signature"
            /// </summary>
            [EnumMember(Value = "adult_signature")] Adultsignature,

            /// <summary>
            ///     Enum Directsignature for "direct_signature"
            /// </summary>
            [EnumMember(Value = "direct_signature")] Directsignature
        }

        /// <summary>
        ///     Set the insurance provider for the entire shipment, insurance is defaulted to
        ///     'insurance_options_provider_enum.none'.  To enable insurance, set the insurance provider
        ///     insurance_options_provider_enum.  Insured amount, should be set inside the shipment.packages collection for each
        ///     shipment_package.
        /// </summary>
        /// <value>
        ///     Set the insurance provider for the entire shipment, insurance is defaulted to
        ///     'insurance_options_provider_enum.none'.  To enable insurance, set the insurance provider
        ///     insurance_options_provider_enum.  Insured amount, should be set inside the shipment.packages collection for each
        ///     shipment_package.
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsuranceProviderEnum
        {
            /// <summary>
            ///     Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")] None,

            /// <summary>
            ///     Enum Shipsurance for "shipsurance"
            /// </summary>
            [EnumMember(Value = "shipsurance")] Shipsurance,

            /// <summary>
            ///     Enum Carrier for "carrier"
            /// </summary>
            [EnumMember(Value = "carrier")] Carrier
        }

        /// <summary>
        ///     Gets or Sets ShipmentStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentStatusEnum
        {
            /// <summary>
            ///     Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")] Pending,

            /// <summary>
            ///     Enum Processing for "processing"
            /// </summary>
            [EnumMember(Value = "processing")] Processing,

            /// <summary>
            ///     Enum Labelpurchased for "label_purchased"
            /// </summary>
            [EnumMember(Value = "label_purchased")] Labelpurchased,

            /// <summary>
            ///     Enum Cancelled for "cancelled"
            /// </summary>
            [EnumMember(Value = "cancelled")] Cancelled
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RateShipmentResponse" /> class.
        /// </summary>
        /// <param name="rateResponse">RateResponse.</param>
        /// <param name="shipmentId">ShipmentId.</param>
        /// <param name="carrierId">CarrierId.</param>
        /// <param name="serviceCode">ServiceCode.</param>
        /// <param name="externalShipmentId">ExternalShipmentId.</param>
        /// <param name="shipDate">ShipDate.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="modifiedAt">ModifiedAt.</param>
        /// <param name="shipmentStatus">ShipmentStatus.</param>
        /// <param name="shipTo">ShipTo.</param>
        /// <param name="shipFrom">ShipFrom.</param>
        /// <param name="warehouseId">WarehouseId.</param>
        /// <param name="returnTo">ReturnTo.</param>
        /// <param name="confirmation">Confirmation.</param>
        /// <param name="customs">Customs.</param>
        /// <param name="advancedOptions">AdvancedOptions.</param>
        /// <param name="insuranceProvider">
        ///     Set the insurance provider for the entire shipment, insurance is defaulted to &#39;
        ///     insurance_options_provider_enum.none&#39;.  To enable insurance, set the insurance provider
        ///     insurance_options_provider_enum.  Insured amount, should be set inside the shipment.packages collection for each
        ///     shipment_package..
        /// </param>
        /// <param name="tags">Tags.</param>
        /// <param name="totalWeight">TotalWeight.</param>
        /// <param name="packages">Packages.</param>
        public RateShipmentResponse(RateResponse rateResponse = default(RateResponse),
            string shipmentId = default(string), string carrierId = default(string),
            string serviceCode = default(string), string externalShipmentId = default(string),
            DateTime? shipDate = default(DateTime?), DateTime? createdAt = default(DateTime?),
            DateTime? modifiedAt = default(DateTime?), ShipmentStatusEnum? shipmentStatus = default(ShipmentStatusEnum?),
            AddressDTO shipTo = default(AddressDTO), AddressDTO shipFrom = default(AddressDTO),
            string warehouseId = default(string), AddressDTO returnTo = default(AddressDTO),
            ConfirmationEnum? confirmation = default(ConfirmationEnum?),
            InternationalOptions customs = default(InternationalOptions),
            Dictionary<string, object> advancedOptions = default(Dictionary<string, object>),
            InsuranceProviderEnum? insuranceProvider = default(InsuranceProviderEnum?),
            List<TagResponse> tags = default(List<TagResponse>), Weight totalWeight = default(Weight),
            List<ShipmentPackage> packages = default(List<ShipmentPackage>))
        {
            RateResponse = rateResponse;
            ShipmentId = shipmentId;
            CarrierId = carrierId;
            ServiceCode = serviceCode;
            ExternalShipmentId = externalShipmentId;
            ShipDate = shipDate;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            ShipmentStatus = shipmentStatus;
            ShipTo = shipTo;
            ShipFrom = shipFrom;
            WarehouseId = warehouseId;
            ReturnTo = returnTo;
            Confirmation = confirmation;
            Customs = customs;
            AdvancedOptions = advancedOptions;
            InsuranceProvider = insuranceProvider;
            Tags = tags;
            TotalWeight = totalWeight;
            Packages = packages;
        }

        /// <summary>
        ///     Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "shipment_status", EmitDefaultValue = false)]
        public ShipmentStatusEnum? ShipmentStatus { get; set; }

        /// <summary>
        ///     Gets or Sets Confirmation
        /// </summary>
        [DataMember(Name = "confirmation", EmitDefaultValue = false)]
        public ConfirmationEnum? Confirmation { get; set; }

        /// <summary>
        ///     Set the insurance provider for the entire shipment, insurance is defaulted to
        ///     'insurance_options_provider_enum.none'.  To enable insurance, set the insurance provider
        ///     insurance_options_provider_enum.  Insured amount, should be set inside the shipment.packages collection for each
        ///     shipment_package.
        /// </summary>
        /// <value>
        ///     Set the insurance provider for the entire shipment, insurance is defaulted to
        ///     'insurance_options_provider_enum.none'.  To enable insurance, set the insurance provider
        ///     insurance_options_provider_enum.  Insured amount, should be set inside the shipment.packages collection for each
        ///     shipment_package.
        /// </value>
        [DataMember(Name = "insurance_provider", EmitDefaultValue = false)]
        public InsuranceProviderEnum? InsuranceProvider { get; set; }

        /// <summary>
        ///     Gets or Sets RateResponse
        /// </summary>
        [DataMember(Name = "rate_response", EmitDefaultValue = false)]
        public RateResponse RateResponse { get; set; }

        /// <summary>
        ///     Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipment_id", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceCode
        /// </summary>
        [DataMember(Name = "service_code", EmitDefaultValue = false)]
        public string ServiceCode { get; set; }

        /// <summary>
        ///     Gets or Sets ExternalShipmentId
        /// </summary>
        [DataMember(Name = "external_shipment_id", EmitDefaultValue = false)]
        public string ExternalShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "ship_date", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets ModifiedAt
        /// </summary>
        [DataMember(Name = "modified_at", EmitDefaultValue = false)]
        public DateTime? ModifiedAt { get; set; }

        /// <summary>
        ///     Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "ship_to", EmitDefaultValue = false)]
        public AddressDTO ShipTo { get; set; }

        /// <summary>
        ///     Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "ship_from", EmitDefaultValue = false)]
        public AddressDTO ShipFrom { get; set; }

        /// <summary>
        ///     Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name = "warehouse_id", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        ///     Gets or Sets ReturnTo
        /// </summary>
        [DataMember(Name = "return_to", EmitDefaultValue = false)]
        public AddressDTO ReturnTo { get; set; }

        /// <summary>
        ///     Gets or Sets Customs
        /// </summary>
        [DataMember(Name = "customs", EmitDefaultValue = false)]
        public InternationalOptions Customs { get; set; }

        /// <summary>
        ///     Gets or Sets AdvancedOptions
        /// </summary>
        [DataMember(Name = "advanced_options", EmitDefaultValue = false)]
        public Dictionary<string, object> AdvancedOptions { get; set; }

        /// <summary>
        ///     Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<TagResponse> Tags { get; set; }

        /// <summary>
        ///     Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name = "total_weight", EmitDefaultValue = false)]
        public Weight TotalWeight { get; set; }

        /// <summary>
        ///     Gets or Sets Packages
        /// </summary>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<ShipmentPackage> Packages { get; set; }

        /// <summary>
        ///     Returns true if RateShipmentResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RateShipmentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateShipmentResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Equals(RateResponse, other.RateResponse) ||
                    RateResponse != null &&
                    RateResponse.Equals(other.RateResponse)
                ) &&
                (
                    ShipmentId == other.ShipmentId ||
                    ShipmentId != null &&
                    ShipmentId.Equals(other.ShipmentId)
                ) &&
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    ServiceCode == other.ServiceCode ||
                    ServiceCode != null &&
                    ServiceCode.Equals(other.ServiceCode)
                ) &&
                (
                    ExternalShipmentId == other.ExternalShipmentId ||
                    ExternalShipmentId != null &&
                    ExternalShipmentId.Equals(other.ExternalShipmentId)
                ) &&
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    ModifiedAt == other.ModifiedAt ||
                    ModifiedAt != null &&
                    ModifiedAt.Equals(other.ModifiedAt)
                ) &&
                (
                    ShipmentStatus == other.ShipmentStatus ||
                    ShipmentStatus != null &&
                    ShipmentStatus.Equals(other.ShipmentStatus)
                ) &&
                (
                    Equals(ShipTo, other.ShipTo) ||
                    ShipTo != null &&
                    ShipTo.Equals(other.ShipTo)
                ) &&
                (
                    Equals(ShipFrom, other.ShipFrom) ||
                    ShipFrom != null &&
                    ShipFrom.Equals(other.ShipFrom)
                ) &&
                (
                    WarehouseId == other.WarehouseId ||
                    WarehouseId != null &&
                    WarehouseId.Equals(other.WarehouseId)
                ) &&
                (
                    Equals(ReturnTo, other.ReturnTo) ||
                    ReturnTo != null &&
                    ReturnTo.Equals(other.ReturnTo)
                ) &&
                (
                    Confirmation == other.Confirmation ||
                    Confirmation != null &&
                    Confirmation.Equals(other.Confirmation)
                ) &&
                (
                    Equals(Customs, other.Customs) ||
                    Customs != null &&
                    Customs.Equals(other.Customs)
                ) &&
                (
                    AdvancedOptions == other.AdvancedOptions ||
                    AdvancedOptions != null &&
                    AdvancedOptions.SequenceEqual(other.AdvancedOptions)
                ) &&
                (
                    InsuranceProvider == other.InsuranceProvider ||
                    InsuranceProvider != null &&
                    InsuranceProvider.Equals(other.InsuranceProvider)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) &&
                (
                    Equals(TotalWeight, other.TotalWeight) ||
                    TotalWeight != null &&
                    TotalWeight.Equals(other.TotalWeight)
                ) &&
                (
                    Packages == other.Packages ||
                    Packages != null &&
                    Packages.SequenceEqual(other.Packages)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RateShipmentResponse {\n");
            sb.Append("  RateResponse: ").Append(RateResponse).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  ExternalShipmentId: ").Append(ExternalShipmentId).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  Confirmation: ").Append(Confirmation).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("  AdvancedOptions: ").Append(AdvancedOptions).Append("\n");
            sb.Append("  InsuranceProvider: ").Append(InsuranceProvider).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as RateShipmentResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (RateResponse != null)
                {
                    hash = hash * 59 + RateResponse.GetHashCode();
                }
                if (ShipmentId != null)
                {
                    hash = hash * 59 + ShipmentId.GetHashCode();
                }
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (ServiceCode != null)
                {
                    hash = hash * 59 + ServiceCode.GetHashCode();
                }
                if (ExternalShipmentId != null)
                {
                    hash = hash * 59 + ExternalShipmentId.GetHashCode();
                }
                if (ShipDate != null)
                {
                    hash = hash * 59 + ShipDate.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (ModifiedAt != null)
                {
                    hash = hash * 59 + ModifiedAt.GetHashCode();
                }
                if (ShipmentStatus != null)
                {
                    hash = hash * 59 + ShipmentStatus.GetHashCode();
                }
                if (ShipTo != null)
                {
                    hash = hash * 59 + ShipTo.GetHashCode();
                }
                if (ShipFrom != null)
                {
                    hash = hash * 59 + ShipFrom.GetHashCode();
                }
                if (WarehouseId != null)
                {
                    hash = hash * 59 + WarehouseId.GetHashCode();
                }
                if (ReturnTo != null)
                {
                    hash = hash * 59 + ReturnTo.GetHashCode();
                }
                if (Confirmation != null)
                {
                    hash = hash * 59 + Confirmation.GetHashCode();
                }
                if (Customs != null)
                {
                    hash = hash * 59 + Customs.GetHashCode();
                }
                if (AdvancedOptions != null)
                {
                    hash = hash * 59 + AdvancedOptions.GetHashCode();
                }
                if (InsuranceProvider != null)
                {
                    hash = hash * 59 + InsuranceProvider.GetHashCode();
                }
                if (Tags != null)
                {
                    hash = hash * 59 + Tags.GetHashCode();
                }
                if (TotalWeight != null)
                {
                    hash = hash * 59 + TotalWeight.GetHashCode();
                }
                if (Packages != null)
                {
                    hash = hash * 59 + Packages.GetHashCode();
                }
                return hash;
            }
        }
    }
}