/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     InternationalOptions
    /// </summary>
    [DataContract]
    public class InternationalOptions : IEquatable<InternationalOptions>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Contents
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentsEnum
        {
            /// <summary>
            ///     Enum Merchandise for "merchandise"
            /// </summary>
            [EnumMember(Value = "merchandise")] Merchandise,

            /// <summary>
            ///     Enum Documents for "documents"
            /// </summary>
            [EnumMember(Value = "documents")] Documents,

            /// <summary>
            ///     Enum Gift for "gift"
            /// </summary>
            [EnumMember(Value = "gift")] Gift,

            /// <summary>
            ///     Enum Returnedgoods for "returned_goods"
            /// </summary>
            [EnumMember(Value = "returned_goods")] Returnedgoods,

            /// <summary>
            ///     Enum Sample for "sample"
            /// </summary>
            [EnumMember(Value = "sample")] Sample
        }

        /// <summary>
        ///     Gets or Sets NonDelivery
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonDeliveryEnum
        {
            /// <summary>
            ///     Enum Returntosender for "return_to_sender"
            /// </summary>
            [EnumMember(Value = "return_to_sender")] Returntosender,

            /// <summary>
            ///     Enum Treatasabandoned for "treat_as_abandoned"
            /// </summary>
            [EnumMember(Value = "treat_as_abandoned")] Treatasabandoned
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InternationalOptions" /> class.
        /// </summary>
        /// <param name="contents">Contents.</param>
        /// <param name="customsItems">CustomsItems.</param>
        /// <param name="nonDelivery">NonDelivery.</param>
        public InternationalOptions(ContentsEnum? contents = default(ContentsEnum?),
            List<CustomsItem> customsItems = default(List<CustomsItem>),
            NonDeliveryEnum? nonDelivery = default(NonDeliveryEnum?))
        {
            Contents = contents;
            CustomsItems = customsItems;
            NonDelivery = nonDelivery;
        }

        /// <summary>
        ///     Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public ContentsEnum? Contents { get; set; }

        /// <summary>
        ///     Gets or Sets NonDelivery
        /// </summary>
        [DataMember(Name = "non_delivery", EmitDefaultValue = false)]
        public NonDeliveryEnum? NonDelivery { get; set; }

        /// <summary>
        ///     Gets or Sets CustomsItems
        /// </summary>
        [DataMember(Name = "customs_items", EmitDefaultValue = false)]
        public List<CustomsItem> CustomsItems { get; set; }

        /// <summary>
        ///     Returns true if InternationalOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of InternationalOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternationalOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Contents == other.Contents ||
                    Contents != null &&
                    Contents.Equals(other.Contents)
                ) &&
                (
                    CustomsItems == other.CustomsItems ||
                    CustomsItems != null &&
                    CustomsItems.SequenceEqual(other.CustomsItems)
                ) &&
                (
                    NonDelivery == other.NonDelivery ||
                    NonDelivery != null &&
                    NonDelivery.Equals(other.NonDelivery)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InternationalOptions {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  CustomsItems: ").Append(CustomsItems).Append("\n");
            sb.Append("  NonDelivery: ").Append(NonDelivery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as InternationalOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Contents != null)
                {
                    hash = hash * 59 + Contents.GetHashCode();
                }
                if (CustomsItems != null)
                {
                    hash = hash * 59 + CustomsItems.GetHashCode();
                }
                if (NonDelivery != null)
                {
                    hash = hash * 59 + NonDelivery.GetHashCode();
                }
                return hash;
            }
        }
    }
}