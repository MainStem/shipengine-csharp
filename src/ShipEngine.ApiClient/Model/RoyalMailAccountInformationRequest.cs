/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// RoyalMailAccountInformationRequest
    /// </summary>
    [DataContract]
    public partial class RoyalMailAccountInformationRequest :  IEquatable<RoyalMailAccountInformationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoyalMailAccountInformationRequest" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="obaEmail">obaEmail.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="email">email.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="streetLine1">streetLine1.</param>
        /// <param name="streetLine2">streetLine2.</param>
        /// <param name="streetLine3">streetLine3.</param>
        /// <param name="city">city.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="phone">phone.</param>
        /// <param name="nickname">nickname.</param>
        public RoyalMailAccountInformationRequest(string accountNumber = default(string), string obaEmail = default(string), string contactName = default(string), string email = default(string), string companyName = default(string), string streetLine1 = default(string), string streetLine2 = default(string), string streetLine3 = default(string), string city = default(string), string postalCode = default(string), string phone = default(string), string nickname = default(string))
        {
            this.AccountNumber = accountNumber;
            this.ObaEmail = obaEmail;
            this.ContactName = contactName;
            this.Email = email;
            this.CompanyName = companyName;
            this.StreetLine1 = streetLine1;
            this.StreetLine2 = streetLine2;
            this.StreetLine3 = streetLine3;
            this.City = city;
            this.PostalCode = postalCode;
            this.Phone = phone;
            this.Nickname = nickname;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ObaEmail
        /// </summary>
        [DataMember(Name="oba_email", EmitDefaultValue=false)]
        public string ObaEmail { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contact_name", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets StreetLine1
        /// </summary>
        [DataMember(Name="street_line1", EmitDefaultValue=false)]
        public string StreetLine1 { get; set; }

        /// <summary>
        /// Gets or Sets StreetLine2
        /// </summary>
        [DataMember(Name="street_line2", EmitDefaultValue=false)]
        public string StreetLine2 { get; set; }

        /// <summary>
        /// Gets or Sets StreetLine3
        /// </summary>
        [DataMember(Name="street_line3", EmitDefaultValue=false)]
        public string StreetLine3 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoyalMailAccountInformationRequest {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ObaEmail: ").Append(ObaEmail).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  StreetLine1: ").Append(StreetLine1).Append("\n");
            sb.Append("  StreetLine2: ").Append(StreetLine2).Append("\n");
            sb.Append("  StreetLine3: ").Append(StreetLine3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoyalMailAccountInformationRequest);
        }

        /// <summary>
        /// Returns true if RoyalMailAccountInformationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RoyalMailAccountInformationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoyalMailAccountInformationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ObaEmail == input.ObaEmail ||
                    (this.ObaEmail != null &&
                    this.ObaEmail.Equals(input.ObaEmail))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.StreetLine1 == input.StreetLine1 ||
                    (this.StreetLine1 != null &&
                    this.StreetLine1.Equals(input.StreetLine1))
                ) && 
                (
                    this.StreetLine2 == input.StreetLine2 ||
                    (this.StreetLine2 != null &&
                    this.StreetLine2.Equals(input.StreetLine2))
                ) && 
                (
                    this.StreetLine3 == input.StreetLine3 ||
                    (this.StreetLine3 != null &&
                    this.StreetLine3.Equals(input.StreetLine3))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ObaEmail != null)
                    hashCode = hashCode * 59 + this.ObaEmail.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.StreetLine1 != null)
                    hashCode = hashCode * 59 + this.StreetLine1.GetHashCode();
                if (this.StreetLine2 != null)
                    hashCode = hashCode * 59 + this.StreetLine2.GetHashCode();
                if (this.StreetLine3 != null)
                    hashCode = hashCode * 59 + this.StreetLine3.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
