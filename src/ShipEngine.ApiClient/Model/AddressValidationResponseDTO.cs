/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     AddressValidationResponseDTO
    /// </summary>
    [DataContract]
    public class AddressValidationResponseDTO : IEquatable<AddressValidationResponseDTO>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum Unverified for "unverified"
            /// </summary>
            [EnumMember(Value = "unverified")] Unverified,

            /// <summary>
            ///     Enum Verified for "verified"
            /// </summary>
            [EnumMember(Value = "verified")] Verified,

            /// <summary>
            ///     Enum Warning for "warning"
            /// </summary>
            [EnumMember(Value = "warning")] Warning,

            /// <summary>
            ///     Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")] Error
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="AddressValidationResponseDTO" /> class.
        /// </summary>
        /// <param name="status">Status.</param>
        /// <param name="originalAddress">OriginalAddress.</param>
        /// <param name="matchedAddress">MatchedAddress.</param>
        /// <param name="messages">Messages.</param>
        /// <param name="nativeMatchedParsedAddress">NativeMatchedParsedAddress.</param>
        /// <param name="outputNotes">OutputNotes.</param>
        public AddressValidationResponseDTO(StatusEnum? status = default(StatusEnum?),
            AddressDTO originalAddress = default(AddressDTO), AddressDTO matchedAddress = default(AddressDTO),
            List<ResponseMessageDTO> messages = default(List<ResponseMessageDTO>),
            object nativeMatchedParsedAddress = default(object), string outputNotes = default(string))
        {
            Status = status;
            OriginalAddress = originalAddress;
            MatchedAddress = matchedAddress;
            Messages = messages;
            NativeMatchedParsedAddress = nativeMatchedParsedAddress;
            OutputNotes = outputNotes;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        ///     Gets or Sets OriginalAddress
        /// </summary>
        [DataMember(Name = "original_address", EmitDefaultValue = false)]
        public AddressDTO OriginalAddress { get; set; }

        /// <summary>
        ///     Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name = "matched_address", EmitDefaultValue = false)]
        public AddressDTO MatchedAddress { get; set; }

        /// <summary>
        ///     Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<ResponseMessageDTO> Messages { get; set; }

        /// <summary>
        ///     Gets or Sets NativeMatchedParsedAddress
        /// </summary>
        [DataMember(Name = "native_matched_parsed_address", EmitDefaultValue = false)]
        public object NativeMatchedParsedAddress { get; set; }

        /// <summary>
        ///     Gets or Sets OutputNotes
        /// </summary>
        [DataMember(Name = "output_notes", EmitDefaultValue = false)]
        public string OutputNotes { get; set; }

        /// <summary>
        ///     Returns true if AddressValidationResponseDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressValidationResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressValidationResponseDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    Equals(OriginalAddress, other.OriginalAddress) ||
                    OriginalAddress != null &&
                    OriginalAddress.Equals(other.OriginalAddress)
                ) &&
                (
                    Equals(MatchedAddress, other.MatchedAddress) ||
                    MatchedAddress != null &&
                    MatchedAddress.Equals(other.MatchedAddress)
                ) &&
                (
                    Messages == other.Messages ||
                    Messages != null &&
                    Messages.SequenceEqual(other.Messages)
                ) &&
                (
                    NativeMatchedParsedAddress == other.NativeMatchedParsedAddress ||
                    NativeMatchedParsedAddress != null &&
                    NativeMatchedParsedAddress.Equals(other.NativeMatchedParsedAddress)
                ) &&
                (
                    OutputNotes == other.OutputNotes ||
                    OutputNotes != null &&
                    OutputNotes.Equals(other.OutputNotes)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressValidationResponseDTO {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OriginalAddress: ").Append(OriginalAddress).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  NativeMatchedParsedAddress: ").Append(NativeMatchedParsedAddress).Append("\n");
            sb.Append("  OutputNotes: ").Append(OutputNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as AddressValidationResponseDTO);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Status != null)
                {
                    hash = hash * 59 + Status.GetHashCode();
                }
                if (OriginalAddress != null)
                {
                    hash = hash * 59 + OriginalAddress.GetHashCode();
                }
                if (MatchedAddress != null)
                {
                    hash = hash * 59 + MatchedAddress.GetHashCode();
                }
                if (Messages != null)
                {
                    hash = hash * 59 + Messages.GetHashCode();
                }
                if (NativeMatchedParsedAddress != null)
                {
                    hash = hash * 59 + NativeMatchedParsedAddress.GetHashCode();
                }
                if (OutputNotes != null)
                {
                    hash = hash * 59 + OutputNotes.GetHashCode();
                }
                return hash;
            }
        }
    }
}