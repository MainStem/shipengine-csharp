/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ShipEngine.ApiClient.Client.SwaggerDateConverter;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    /// AddressValidationResponseDTO
    /// </summary>
    [DataContract]
    public partial class AddressValidationResponseDTO :  IEquatable<AddressValidationResponseDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Unverified for "unverified"
            /// </summary>
            [EnumMember(Value = "unverified")]
            Unverified,
            
            /// <summary>
            /// Enum Verified for "verified"
            /// </summary>
            [EnumMember(Value = "verified")]
            Verified,
            
            /// <summary>
            /// Enum Warning for "warning"
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning,
            
            /// <summary>
            /// Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")]
            Error
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressValidationResponseDTO" /> class.
        /// </summary>
        /// <param name="Status">Status.</param>
        /// <param name="OriginalAddress">OriginalAddress.</param>
        /// <param name="MatchedAddress">MatchedAddress.</param>
        /// <param name="Messages">Messages.</param>
        /// <param name="NativeMatchedParsedAddress">NativeMatchedParsedAddress.</param>
        /// <param name="OutputNotes">OutputNotes.</param>
        public AddressValidationResponseDTO(StatusEnum? Status = default(StatusEnum?), AddressDTO OriginalAddress = default(AddressDTO), AddressDTO MatchedAddress = default(AddressDTO), List<ResponseMessageDTO> Messages = default(List<ResponseMessageDTO>), Object NativeMatchedParsedAddress = default(Object), string OutputNotes = default(string))
        {
            this.Status = Status;
            this.OriginalAddress = OriginalAddress;
            this.MatchedAddress = MatchedAddress;
            this.Messages = Messages;
            this.NativeMatchedParsedAddress = NativeMatchedParsedAddress;
            this.OutputNotes = OutputNotes;
        }
        

        /// <summary>
        /// Gets or Sets OriginalAddress
        /// </summary>
        [DataMember(Name="original_address", EmitDefaultValue=false)]
        public AddressDTO OriginalAddress { get; set; }

        /// <summary>
        /// Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name="matched_address", EmitDefaultValue=false)]
        public AddressDTO MatchedAddress { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ResponseMessageDTO> Messages { get; set; }

        /// <summary>
        /// Gets or Sets NativeMatchedParsedAddress
        /// </summary>
        [DataMember(Name="native_matched_parsed_address", EmitDefaultValue=false)]
        public Object NativeMatchedParsedAddress { get; set; }

        /// <summary>
        /// Gets or Sets OutputNotes
        /// </summary>
        [DataMember(Name="output_notes", EmitDefaultValue=false)]
        public string OutputNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressValidationResponseDTO {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OriginalAddress: ").Append(OriginalAddress).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  NativeMatchedParsedAddress: ").Append(NativeMatchedParsedAddress).Append("\n");
            sb.Append("  OutputNotes: ").Append(OutputNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressValidationResponseDTO);
        }

        /// <summary>
        /// Returns true if AddressValidationResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressValidationResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressValidationResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.OriginalAddress == input.OriginalAddress ||
                    (this.OriginalAddress != null &&
                    this.OriginalAddress.Equals(input.OriginalAddress))
                ) && 
                (
                    this.MatchedAddress == input.MatchedAddress ||
                    (this.MatchedAddress != null &&
                    this.MatchedAddress.Equals(input.MatchedAddress))
                ) && 
                (
                    this.Messages == input.Messages ||
                    (this.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages))
                ) && 
                (
                    this.NativeMatchedParsedAddress == input.NativeMatchedParsedAddress ||
                    (this.NativeMatchedParsedAddress != null &&
                    this.NativeMatchedParsedAddress.Equals(input.NativeMatchedParsedAddress))
                ) && 
                (
                    this.OutputNotes == input.OutputNotes ||
                    (this.OutputNotes != null &&
                    this.OutputNotes.Equals(input.OutputNotes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.OriginalAddress != null)
                    hashCode = hashCode * 59 + this.OriginalAddress.GetHashCode();
                if (this.MatchedAddress != null)
                    hashCode = hashCode * 59 + this.MatchedAddress.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.NativeMatchedParsedAddress != null)
                    hashCode = hashCode * 59 + this.NativeMatchedParsedAddress.GetHashCode();
                if (this.OutputNotes != null)
                    hashCode = hashCode * 59 + this.OutputNotes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
