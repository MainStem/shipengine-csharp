/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Label
    /// </summary>
    [DataContract]
    public class Label : IEquatable<Label>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets LabelFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            ///     Enum Pdf for "pdf"
            /// </summary>
            [EnumMember(Value = "pdf")] Pdf,

            /// <summary>
            ///     Enum Zpl for "zpl"
            /// </summary>
            [EnumMember(Value = "zpl")] Zpl
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum Processing for "processing"
            /// </summary>
            [EnumMember(Value = "processing")] Processing,

            /// <summary>
            ///     Enum Completed for "completed"
            /// </summary>
            [EnumMember(Value = "completed")] Completed,

            /// <summary>
            ///     Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")] Error,

            /// <summary>
            ///     Enum Voided for "voided"
            /// </summary>
            [EnumMember(Value = "voided")] Voided
        }

        /// <summary>
        ///     Gets or Sets TrackingStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrackingStatusEnum
        {
            /// <summary>
            ///     Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")] Unknown,

            /// <summary>
            ///     Enum Intransit for "in_transit"
            /// </summary>
            [EnumMember(Value = "in_transit")] Intransit,

            /// <summary>
            ///     Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")] Error,

            /// <summary>
            ///     Enum Delivered for "delivered"
            /// </summary>
            [EnumMember(Value = "delivered")] Delivered
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="labelId">LabelId.</param>
        /// <param name="status">Status.</param>
        /// <param name="shipmentId">ShipmentId.</param>
        /// <param name="shipDate">ShipDate.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="shipmentCost">ShipmentCost.</param>
        /// <param name="insuranceCost">InsuranceCost.</param>
        /// <param name="trackingNumber">TrackingNumber.</param>
        /// <param name="isReturnLabel">IsReturnLabel.</param>
        /// <param name="isInternational">IsInternational.</param>
        /// <param name="batchId">BatchId.</param>
        /// <param name="carrierId">CarrierId.</param>
        /// <param name="serviceCode">ServiceCode.</param>
        /// <param name="packageCode">PackageCode.</param>
        /// <param name="voided">Voided.</param>
        /// <param name="voidedAt">VoidedAt.</param>
        /// <param name="labelFormat">LabelFormat.</param>
        /// <param name="labelLayout">LabelLayout.</param>
        /// <param name="trackable">Trackable.</param>
        /// <param name="carrierCode">CarrierCode.</param>
        /// <param name="trackingStatus">TrackingStatus.</param>
        /// <param name="labelDownload">LabelDownload.</param>
        /// <param name="formDownload">FormDownload.</param>
        /// <param name="insuranceClaim">InsuranceClaim.</param>
        public Label(string labelId = default(string), StatusEnum? status = default(StatusEnum?),
            string shipmentId = default(string), DateTime? shipDate = default(DateTime?),
            DateTime? createdAt = default(DateTime?), MoneyDTO shipmentCost = default(MoneyDTO),
            MoneyDTO insuranceCost = default(MoneyDTO), string trackingNumber = default(string),
            bool? isReturnLabel = default(bool?), bool? isInternational = default(bool?),
            string batchId = default(string), string carrierId = default(string), string serviceCode = default(string),
            string packageCode = default(string), bool? voided = default(bool?), DateTime? voidedAt = default(DateTime?),
            LabelFormatEnum? labelFormat = default(LabelFormatEnum?), string labelLayout = default(string),
            bool? trackable = default(bool?), string carrierCode = default(string),
            TrackingStatusEnum? trackingStatus = default(TrackingStatusEnum?), LinkDTO labelDownload = default(LinkDTO),
            LinkDTO formDownload = default(LinkDTO), LinkDTO insuranceClaim = default(LinkDTO))
        {
            LabelId = labelId;
            Status = status;
            ShipmentId = shipmentId;
            ShipDate = shipDate;
            CreatedAt = createdAt;
            ShipmentCost = shipmentCost;
            InsuranceCost = insuranceCost;
            TrackingNumber = trackingNumber;
            IsReturnLabel = isReturnLabel;
            IsInternational = isInternational;
            BatchId = batchId;
            CarrierId = carrierId;
            ServiceCode = serviceCode;
            PackageCode = packageCode;
            Voided = voided;
            VoidedAt = voidedAt;
            LabelFormat = labelFormat;
            LabelLayout = labelLayout;
            Trackable = trackable;
            CarrierCode = carrierCode;
            TrackingStatus = trackingStatus;
            LabelDownload = labelDownload;
            FormDownload = formDownload;
            InsuranceClaim = insuranceClaim;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        ///     Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "label_format", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }

        /// <summary>
        ///     Gets or Sets TrackingStatus
        /// </summary>
        [DataMember(Name = "tracking_status", EmitDefaultValue = false)]
        public TrackingStatusEnum? TrackingStatus { get; set; }

        /// <summary>
        ///     Gets or Sets LabelId
        /// </summary>
        [DataMember(Name = "label_id", EmitDefaultValue = false)]
        public string LabelId { get; set; }

        /// <summary>
        ///     Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipment_id", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "ship_date", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets ShipmentCost
        /// </summary>
        [DataMember(Name = "shipment_cost", EmitDefaultValue = false)]
        public MoneyDTO ShipmentCost { get; set; }

        /// <summary>
        ///     Gets or Sets InsuranceCost
        /// </summary>
        [DataMember(Name = "insurance_cost", EmitDefaultValue = false)]
        public MoneyDTO InsuranceCost { get; set; }

        /// <summary>
        ///     Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "tracking_number", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        ///     Gets or Sets IsReturnLabel
        /// </summary>
        [DataMember(Name = "is_return_label", EmitDefaultValue = false)]
        public bool? IsReturnLabel { get; set; }

        /// <summary>
        ///     Gets or Sets IsInternational
        /// </summary>
        [DataMember(Name = "is_international", EmitDefaultValue = false)]
        public bool? IsInternational { get; set; }

        /// <summary>
        ///     Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets ServiceCode
        /// </summary>
        [DataMember(Name = "service_code", EmitDefaultValue = false)]
        public string ServiceCode { get; set; }

        /// <summary>
        ///     Gets or Sets PackageCode
        /// </summary>
        [DataMember(Name = "package_code", EmitDefaultValue = false)]
        public string PackageCode { get; set; }

        /// <summary>
        ///     Gets or Sets Voided
        /// </summary>
        [DataMember(Name = "voided", EmitDefaultValue = false)]
        public bool? Voided { get; set; }

        /// <summary>
        ///     Gets or Sets VoidedAt
        /// </summary>
        [DataMember(Name = "voided_at", EmitDefaultValue = false)]
        public DateTime? VoidedAt { get; set; }

        /// <summary>
        ///     Gets or Sets LabelLayout
        /// </summary>
        [DataMember(Name = "label_layout", EmitDefaultValue = false)]
        public string LabelLayout { get; set; }

        /// <summary>
        ///     Gets or Sets Trackable
        /// </summary>
        [DataMember(Name = "trackable", EmitDefaultValue = false)]
        public bool? Trackable { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        ///     Gets or Sets LabelDownload
        /// </summary>
        [DataMember(Name = "label_download", EmitDefaultValue = false)]
        public LinkDTO LabelDownload { get; set; }

        /// <summary>
        ///     Gets or Sets FormDownload
        /// </summary>
        [DataMember(Name = "form_download", EmitDefaultValue = false)]
        public LinkDTO FormDownload { get; set; }

        /// <summary>
        ///     Gets or Sets InsuranceClaim
        /// </summary>
        [DataMember(Name = "insurance_claim", EmitDefaultValue = false)]
        public LinkDTO InsuranceClaim { get; set; }

        /// <summary>
        ///     Returns true if Label instances are equal
        /// </summary>
        /// <param name="other">Instance of Label to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Label other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    LabelId == other.LabelId ||
                    LabelId != null &&
                    LabelId.Equals(other.LabelId)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    ShipmentId == other.ShipmentId ||
                    ShipmentId != null &&
                    ShipmentId.Equals(other.ShipmentId)
                ) &&
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    Equals(ShipmentCost, other.ShipmentCost) ||
                    ShipmentCost != null &&
                    ShipmentCost.Equals(other.ShipmentCost)
                ) &&
                (
                    Equals(InsuranceCost, other.InsuranceCost) ||
                    InsuranceCost != null &&
                    InsuranceCost.Equals(other.InsuranceCost)
                ) &&
                (
                    TrackingNumber == other.TrackingNumber ||
                    TrackingNumber != null &&
                    TrackingNumber.Equals(other.TrackingNumber)
                ) &&
                (
                    IsReturnLabel == other.IsReturnLabel ||
                    IsReturnLabel != null &&
                    IsReturnLabel.Equals(other.IsReturnLabel)
                ) &&
                (
                    IsInternational == other.IsInternational ||
                    IsInternational != null &&
                    IsInternational.Equals(other.IsInternational)
                ) &&
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) &&
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    ServiceCode == other.ServiceCode ||
                    ServiceCode != null &&
                    ServiceCode.Equals(other.ServiceCode)
                ) &&
                (
                    PackageCode == other.PackageCode ||
                    PackageCode != null &&
                    PackageCode.Equals(other.PackageCode)
                ) &&
                (
                    Voided == other.Voided ||
                    Voided != null &&
                    Voided.Equals(other.Voided)
                ) &&
                (
                    VoidedAt == other.VoidedAt ||
                    VoidedAt != null &&
                    VoidedAt.Equals(other.VoidedAt)
                ) &&
                (
                    LabelFormat == other.LabelFormat ||
                    LabelFormat != null &&
                    LabelFormat.Equals(other.LabelFormat)
                ) &&
                (
                    LabelLayout == other.LabelLayout ||
                    LabelLayout != null &&
                    LabelLayout.Equals(other.LabelLayout)
                ) &&
                (
                    Trackable == other.Trackable ||
                    Trackable != null &&
                    Trackable.Equals(other.Trackable)
                ) &&
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) &&
                (
                    TrackingStatus == other.TrackingStatus ||
                    TrackingStatus != null &&
                    TrackingStatus.Equals(other.TrackingStatus)
                ) &&
                (
                    Equals(LabelDownload, other.LabelDownload) ||
                    LabelDownload != null &&
                    LabelDownload.Equals(other.LabelDownload)
                ) &&
                (
                    Equals(FormDownload, other.FormDownload) ||
                    FormDownload != null &&
                    FormDownload.Equals(other.FormDownload)
                ) &&
                (
                    Equals(InsuranceClaim, other.InsuranceClaim) ||
                    InsuranceClaim != null &&
                    InsuranceClaim.Equals(other.InsuranceClaim)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ShipmentCost: ").Append(ShipmentCost).Append("\n");
            sb.Append("  InsuranceCost: ").Append(InsuranceCost).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  IsReturnLabel: ").Append(IsReturnLabel).Append("\n");
            sb.Append("  IsInternational: ").Append(IsInternational).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  PackageCode: ").Append(PackageCode).Append("\n");
            sb.Append("  Voided: ").Append(Voided).Append("\n");
            sb.Append("  VoidedAt: ").Append(VoidedAt).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  LabelLayout: ").Append(LabelLayout).Append("\n");
            sb.Append("  Trackable: ").Append(Trackable).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  TrackingStatus: ").Append(TrackingStatus).Append("\n");
            sb.Append("  LabelDownload: ").Append(LabelDownload).Append("\n");
            sb.Append("  FormDownload: ").Append(FormDownload).Append("\n");
            sb.Append("  InsuranceClaim: ").Append(InsuranceClaim).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Label);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (LabelId != null)
                {
                    hash = hash * 59 + LabelId.GetHashCode();
                }
                if (Status != null)
                {
                    hash = hash * 59 + Status.GetHashCode();
                }
                if (ShipmentId != null)
                {
                    hash = hash * 59 + ShipmentId.GetHashCode();
                }
                if (ShipDate != null)
                {
                    hash = hash * 59 + ShipDate.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (ShipmentCost != null)
                {
                    hash = hash * 59 + ShipmentCost.GetHashCode();
                }
                if (InsuranceCost != null)
                {
                    hash = hash * 59 + InsuranceCost.GetHashCode();
                }
                if (TrackingNumber != null)
                {
                    hash = hash * 59 + TrackingNumber.GetHashCode();
                }
                if (IsReturnLabel != null)
                {
                    hash = hash * 59 + IsReturnLabel.GetHashCode();
                }
                if (IsInternational != null)
                {
                    hash = hash * 59 + IsInternational.GetHashCode();
                }
                if (BatchId != null)
                {
                    hash = hash * 59 + BatchId.GetHashCode();
                }
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (ServiceCode != null)
                {
                    hash = hash * 59 + ServiceCode.GetHashCode();
                }
                if (PackageCode != null)
                {
                    hash = hash * 59 + PackageCode.GetHashCode();
                }
                if (Voided != null)
                {
                    hash = hash * 59 + Voided.GetHashCode();
                }
                if (VoidedAt != null)
                {
                    hash = hash * 59 + VoidedAt.GetHashCode();
                }
                if (LabelFormat != null)
                {
                    hash = hash * 59 + LabelFormat.GetHashCode();
                }
                if (LabelLayout != null)
                {
                    hash = hash * 59 + LabelLayout.GetHashCode();
                }
                if (Trackable != null)
                {
                    hash = hash * 59 + Trackable.GetHashCode();
                }
                if (CarrierCode != null)
                {
                    hash = hash * 59 + CarrierCode.GetHashCode();
                }
                if (TrackingStatus != null)
                {
                    hash = hash * 59 + TrackingStatus.GetHashCode();
                }
                if (LabelDownload != null)
                {
                    hash = hash * 59 + LabelDownload.GetHashCode();
                }
                if (FormDownload != null)
                {
                    hash = hash * 59 + FormDownload.GetHashCode();
                }
                if (InsuranceClaim != null)
                {
                    hash = hash * 59 + InsuranceClaim.GetHashCode();
                }
                return hash;
            }
        }
    }
}