/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Dimensions
    /// </summary>
    [DataContract]
    public class Dimensions : IEquatable<Dimensions>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Unit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            ///     Enum Inch for "inch"
            /// </summary>
            [EnumMember(Value = "inch")] Inch,

            /// <summary>
            ///     Enum Centimeter for "centimeter"
            /// </summary>
            [EnumMember(Value = "centimeter")] Centimeter
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="unit">Unit.</param>
        /// <param name="length">Length.</param>
        /// <param name="width">Width.</param>
        /// <param name="height">Height.</param>
        public Dimensions(UnitEnum? unit = default(UnitEnum?), double? length = default(double?),
            double? width = default(double?), double? height = default(double?))
        {
            Unit = unit;
            Length = length;
            Width = width;
            Height = height;
        }

        /// <summary>
        ///     Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public UnitEnum? Unit { get; set; }

        /// <summary>
        ///     Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double? Length { get; set; }

        /// <summary>
        ///     Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double? Width { get; set; }

        /// <summary>
        ///     Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public double? Height { get; set; }

        /// <summary>
        ///     Returns true if Dimensions instances are equal
        /// </summary>
        /// <param name="other">Instance of Dimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dimensions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) &&
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) &&
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                ) &&
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Dimensions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Unit != null)
                {
                    hash = hash * 59 + Unit.GetHashCode();
                }
                if (Length != null)
                {
                    hash = hash * 59 + Length.GetHashCode();
                }
                if (Width != null)
                {
                    hash = hash * 59 + Width.GetHashCode();
                }
                if (Height != null)
                {
                    hash = hash * 59 + Height.GetHashCode();
                }
                return hash;
            }
        }
    }
}