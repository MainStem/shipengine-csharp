/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     MoneyDTO
    /// </summary>
    [DataContract]
    public class MoneyDTO : IEquatable<MoneyDTO>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Currency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            ///     Enum USD for "uSD"
            /// </summary>
            [EnumMember(Value = "uSD")] Usd,

            /// <summary>
            ///     Enum CAD for "cAD"
            /// </summary>
            [EnumMember(Value = "cAD")] Cad,

            /// <summary>
            ///     Enum AUD for "aUD"
            /// </summary>
            [EnumMember(Value = "aUD")] Aud,

            /// <summary>
            ///     Enum GBP for "gBP"
            /// </summary>
            [EnumMember(Value = "gBP")] Gbp,

            /// <summary>
            ///     Enum EUR for "eUR"
            /// </summary>
            [EnumMember(Value = "eUR")] Eur
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="MoneyDTO" /> class.
        /// </summary>
        /// <param name="currency">Currency.</param>
        /// <param name="amount">Amount.</param>
        public MoneyDTO(CurrencyEnum? currency = default(CurrencyEnum?), double? amount = default(double?))
        {
            Currency = currency;
            Amount = amount;
        }

        /// <summary>
        ///     Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyEnum? Currency { get; set; }

        /// <summary>
        ///     Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double? Amount { get; set; }

        /// <summary>
        ///     Returns true if MoneyDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of MoneyDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoneyDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) &&
                (
                    Equals(Amount, other.Amount) ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoneyDTO {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as MoneyDTO);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Currency != null)
                {
                    hash = hash * 59 + Currency.GetHashCode();
                }
                if (Amount != null)
                {
                    hash = hash * 59 + Amount.GetHashCode();
                }
                return hash;
            }
        }
    }
}