/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     TrackEvent
    /// </summary>
    [DataContract]
    public class TrackEvent : IEquatable<TrackEvent>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TrackEvent" /> class.
        /// </summary>
        /// <param name="occurredAt">OccurredAt.</param>
        /// <param name="description">Description.</param>
        /// <param name="cityLocality">CityLocality.</param>
        /// <param name="stateProvince">StateProvince.</param>
        /// <param name="postalCode">PostalCode.</param>
        /// <param name="countryCode">CountryCode.</param>
        /// <param name="companyName">CompanyName.</param>
        /// <param name="signer">Signer.</param>
        public TrackEvent(DateTime? occurredAt = default(DateTime?), string description = default(string),
            string cityLocality = default(string), string stateProvince = default(string),
            string postalCode = default(string), string countryCode = default(string),
            string companyName = default(string), string signer = default(string))
        {
            OccurredAt = occurredAt;
            Description = description;
            CityLocality = cityLocality;
            StateProvince = stateProvince;
            PostalCode = postalCode;
            CountryCode = countryCode;
            CompanyName = companyName;
            Signer = signer;
        }

        /// <summary>
        ///     Gets or Sets OccurredAt
        /// </summary>
        [DataMember(Name = "occurred_at", EmitDefaultValue = false)]
        public DateTime? OccurredAt { get; set; }

        /// <summary>
        ///     Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        ///     Gets or Sets CityLocality
        /// </summary>
        [DataMember(Name = "city_locality", EmitDefaultValue = false)]
        public string CityLocality { get; set; }

        /// <summary>
        ///     Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name = "state_province", EmitDefaultValue = false)]
        public string StateProvince { get; set; }

        /// <summary>
        ///     Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        ///     Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        ///     Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        ///     Gets or Sets Signer
        /// </summary>
        [DataMember(Name = "signer", EmitDefaultValue = false)]
        public string Signer { get; set; }

        /// <summary>
        ///     Returns true if TrackEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    OccurredAt == other.OccurredAt ||
                    OccurredAt != null &&
                    OccurredAt.Equals(other.OccurredAt)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    CityLocality == other.CityLocality ||
                    CityLocality != null &&
                    CityLocality.Equals(other.CityLocality)
                ) &&
                (
                    StateProvince == other.StateProvince ||
                    StateProvince != null &&
                    StateProvince.Equals(other.StateProvince)
                ) &&
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) &&
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) &&
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) &&
                (
                    Signer == other.Signer ||
                    Signer != null &&
                    Signer.Equals(other.Signer)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackEvent {\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CityLocality: ").Append(CityLocality).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Signer: ").Append(Signer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as TrackEvent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (OccurredAt != null)
                {
                    hash = hash * 59 + OccurredAt.GetHashCode();
                }
                if (Description != null)
                {
                    hash = hash * 59 + Description.GetHashCode();
                }
                if (CityLocality != null)
                {
                    hash = hash * 59 + CityLocality.GetHashCode();
                }
                if (StateProvince != null)
                {
                    hash = hash * 59 + StateProvince.GetHashCode();
                }
                if (PostalCode != null)
                {
                    hash = hash * 59 + PostalCode.GetHashCode();
                }
                if (CountryCode != null)
                {
                    hash = hash * 59 + CountryCode.GetHashCode();
                }
                if (CompanyName != null)
                {
                    hash = hash * 59 + CompanyName.GetHashCode();
                }
                if (Signer != null)
                {
                    hash = hash * 59 + Signer.GetHashCode();
                }
                return hash;
            }
        }
    }
}