/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     BatchResponseErrors
    /// </summary>
    [DataContract]
    public class BatchResponseErrors : IEquatable<BatchResponseErrors>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="BatchResponseErrors" /> class.
        /// </summary>
        /// <param name="errors">Errors.</param>
        /// <param name="links">Links.</param>
        public BatchResponseErrors(List<BatchResponseError> errors = default(List<BatchResponseError>),
            PaginationLinkDTO links = default(PaginationLinkDTO))
        {
            Errors = errors;
            Links = links;
        }

        /// <summary>
        ///     Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<BatchResponseError> Errors { get; set; }

        /// <summary>
        ///     Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public PaginationLinkDTO Links { get; set; }

        /// <summary>
        ///     Returns true if BatchResponseErrors instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchResponseErrors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchResponseErrors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) &&
                (
                    Equals(Links, other.Links) ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchResponseErrors {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as BatchResponseErrors);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Errors != null)
                {
                    hash = hash * 59 + Errors.GetHashCode();
                }
                if (Links != null)
                {
                    hash = hash * 59 + Links.GetHashCode();
                }
                return hash;
            }
        }
    }
}