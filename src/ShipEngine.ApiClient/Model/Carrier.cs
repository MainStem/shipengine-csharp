/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Carrier
    /// </summary>
    [DataContract]
    public class Carrier : IEquatable<Carrier>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Carrier" /> class.
        /// </summary>
        /// <param name="carrierId">CarrierId.</param>
        /// <param name="carrierCode">CarrierCode.</param>
        /// <param name="accountNumber">AccountNumber.</param>
        /// <param name="requiresFundedAmount">RequiresFundedAmount.</param>
        /// <param name="balance">Balance.</param>
        /// <param name="nickname">Nickname.</param>
        /// <param name="friendlyName">FriendlyName.</param>
        /// <param name="primary">Primary.</param>
        /// <param name="services">Services.</param>
        /// <param name="packages">Packages.</param>
        /// <param name="options">Options.</param>
        public Carrier(string carrierId = default(string), string carrierCode = default(string),
            string accountNumber = default(string), bool? requiresFundedAmount = default(bool?),
            decimal? balance = default(decimal?), string nickname = default(string), string friendlyName = default(string),
            bool? primary = default(bool?), List<Service> services = default(List<Service>),
            List<Package> packages = default(List<Package>),
            List<CarrierAdvancedOption> options = default(List<CarrierAdvancedOption>))
        {
            CarrierId = carrierId;
            CarrierCode = carrierCode;
            AccountNumber = accountNumber;
            RequiresFundedAmount = requiresFundedAmount;
            Balance = balance;
            Nickname = nickname;
            FriendlyName = friendlyName;
            Primary = primary;
            Services = services;
            Packages = packages;
            Options = options;
        }

        /// <summary>
        ///     Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        ///     Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        ///     Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "account_number", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        ///     Gets or Sets RequiresFundedAmount
        /// </summary>
        [DataMember(Name = "requires_funded_amount", EmitDefaultValue = false)]
        public bool? RequiresFundedAmount { get; set; }

        /// <summary>
        ///     Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public decimal? Balance { get; set; }

        /// <summary>
        ///     Gets or Sets Nickname
        /// </summary>
        [DataMember(Name = "nickname", EmitDefaultValue = false)]
        public string Nickname { get; set; }

        /// <summary>
        ///     Gets or Sets FriendlyName
        /// </summary>
        [DataMember(Name = "friendly_name", EmitDefaultValue = false)]
        public string FriendlyName { get; set; }

        /// <summary>
        ///     Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = false)]
        public bool? Primary { get; set; }

        /// <summary>
        ///     Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public List<Service> Services { get; set; }

        /// <summary>
        ///     Gets or Sets Packages
        /// </summary>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<Package> Packages { get; set; }

        /// <summary>
        ///     Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<CarrierAdvancedOption> Options { get; set; }

        /// <summary>
        ///     Returns true if Carrier instances are equal
        /// </summary>
        /// <param name="other">Instance of Carrier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Carrier other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    CarrierId == other.CarrierId ||
                    CarrierId != null &&
                    CarrierId.Equals(other.CarrierId)
                ) &&
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) &&
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) &&
                (
                    RequiresFundedAmount == other.RequiresFundedAmount ||
                    RequiresFundedAmount != null &&
                    RequiresFundedAmount.Equals(other.RequiresFundedAmount)
                ) &&
                (
                    Balance == other.Balance ||
                    Balance != null &&
                    Balance.Equals(other.Balance)
                ) &&
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) &&
                (
                    FriendlyName == other.FriendlyName ||
                    FriendlyName != null &&
                    FriendlyName.Equals(other.FriendlyName)
                ) &&
                (
                    Primary == other.Primary ||
                    Primary != null &&
                    Primary.Equals(other.Primary)
                ) &&
                (
                    Services == other.Services ||
                    Services != null &&
                    Services.SequenceEqual(other.Services)
                ) &&
                (
                    Packages == other.Packages ||
                    Packages != null &&
                    Packages.SequenceEqual(other.Packages)
                ) &&
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.SequenceEqual(other.Options)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Carrier {\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  RequiresFundedAmount: ").Append(RequiresFundedAmount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Carrier);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (CarrierId != null)
                {
                    hash = hash * 59 + CarrierId.GetHashCode();
                }
                if (CarrierCode != null)
                {
                    hash = hash * 59 + CarrierCode.GetHashCode();
                }
                if (AccountNumber != null)
                {
                    hash = hash * 59 + AccountNumber.GetHashCode();
                }
                if (RequiresFundedAmount != null)
                {
                    hash = hash * 59 + RequiresFundedAmount.GetHashCode();
                }
                if (Balance != null)
                {
                    hash = hash * 59 + Balance.GetHashCode();
                }
                if (Nickname != null)
                {
                    hash = hash * 59 + Nickname.GetHashCode();
                }
                if (FriendlyName != null)
                {
                    hash = hash * 59 + FriendlyName.GetHashCode();
                }
                if (Primary != null)
                {
                    hash = hash * 59 + Primary.GetHashCode();
                }
                if (Services != null)
                {
                    hash = hash * 59 + Services.GetHashCode();
                }
                if (Packages != null)
                {
                    hash = hash * 59 + Packages.GetHashCode();
                }
                if (Options != null)
                {
                    hash = hash * 59 + Options.GetHashCode();
                }
                return hash;
            }
        }
    }
}