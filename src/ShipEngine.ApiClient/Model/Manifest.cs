/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     Manifest
    /// </summary>
    [DataContract]
    public class Manifest : IEquatable<Manifest>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Manifest" /> class.
        /// </summary>
        /// <param name="manifestId">ManifestId.</param>
        /// <param name="formId">FormId.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="shipDate">ShipDate.</param>
        /// <param name="shipments">Shipments.</param>
        /// <param name="warehouseId">WarehouseId.</param>
        /// <param name="submissionId">SubmissionId.</param>
        /// <param name="manifestDownload">ManifestDownload.</param>
        public Manifest(string manifestId = default(string), string formId = default(string),
            DateTime? createdAt = default(DateTime?), DateTime? shipDate = default(DateTime?),
            int? shipments = default(int?), string warehouseId = default(string), string submissionId = default(string),
            LinkDTO manifestDownload = default(LinkDTO))
        {
            ManifestId = manifestId;
            FormId = formId;
            CreatedAt = createdAt;
            ShipDate = shipDate;
            Shipments = shipments;
            WarehouseId = warehouseId;
            SubmissionId = submissionId;
            ManifestDownload = manifestDownload;
        }

        /// <summary>
        ///     Gets or Sets ManifestId
        /// </summary>
        [DataMember(Name = "manifest_id", EmitDefaultValue = false)]
        public string ManifestId { get; set; }

        /// <summary>
        ///     Gets or Sets FormId
        /// </summary>
        [DataMember(Name = "form_id", EmitDefaultValue = false)]
        public string FormId { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "ship_date", EmitDefaultValue = false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        ///     Gets or Sets Shipments
        /// </summary>
        [DataMember(Name = "shipments", EmitDefaultValue = false)]
        public int? Shipments { get; set; }

        /// <summary>
        ///     Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name = "warehouse_id", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        ///     Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name = "submission_id", EmitDefaultValue = false)]
        public string SubmissionId { get; set; }

        /// <summary>
        ///     Gets or Sets ManifestDownload
        /// </summary>
        [DataMember(Name = "manifest_download", EmitDefaultValue = false)]
        public LinkDTO ManifestDownload { get; set; }

        /// <summary>
        ///     Returns true if Manifest instances are equal
        /// </summary>
        /// <param name="other">Instance of Manifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Manifest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    ManifestId == other.ManifestId ||
                    ManifestId != null &&
                    ManifestId.Equals(other.ManifestId)
                ) &&
                (
                    FormId == other.FormId ||
                    FormId != null &&
                    FormId.Equals(other.FormId)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) &&
                (
                    Shipments == other.Shipments ||
                    Shipments != null &&
                    Shipments.Equals(other.Shipments)
                ) &&
                (
                    WarehouseId == other.WarehouseId ||
                    WarehouseId != null &&
                    WarehouseId.Equals(other.WarehouseId)
                ) &&
                (
                    SubmissionId == other.SubmissionId ||
                    SubmissionId != null &&
                    SubmissionId.Equals(other.SubmissionId)
                ) &&
                (
                    Equals(ManifestDownload, other.ManifestDownload) ||
                    ManifestDownload != null &&
                    ManifestDownload.Equals(other.ManifestDownload)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Manifest {\n");
            sb.Append("  ManifestId: ").Append(ManifestId).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  ManifestDownload: ").Append(ManifestDownload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Manifest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (ManifestId != null)
                {
                    hash = hash * 59 + ManifestId.GetHashCode();
                }
                if (FormId != null)
                {
                    hash = hash * 59 + FormId.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (ShipDate != null)
                {
                    hash = hash * 59 + ShipDate.GetHashCode();
                }
                if (Shipments != null)
                {
                    hash = hash * 59 + Shipments.GetHashCode();
                }
                if (WarehouseId != null)
                {
                    hash = hash * 59 + WarehouseId.GetHashCode();
                }
                if (SubmissionId != null)
                {
                    hash = hash * 59 + SubmissionId.GetHashCode();
                }
                if (ManifestDownload != null)
                {
                    hash = hash * 59 + ManifestDownload.GetHashCode();
                }
                return hash;
            }
        }
    }
}