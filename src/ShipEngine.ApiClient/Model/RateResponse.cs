/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     RateResponse
    /// </summary>
    [DataContract]
    public class RateResponse : IEquatable<RateResponse>, IValidatableObject
    {
        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum Working for "working"
            /// </summary>
            [EnumMember(Value = "working")] Working,

            /// <summary>
            ///     Enum Completed for "completed"
            /// </summary>
            [EnumMember(Value = "completed")] Completed,

            /// <summary>
            ///     Enum Partial for "partial"
            /// </summary>
            [EnumMember(Value = "partial")] Partial,

            /// <summary>
            ///     Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")] Error
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RateResponse" /> class.
        /// </summary>
        /// <param name="rates">Rates.</param>
        /// <param name="invalidRates">InvalidRates.</param>
        /// <param name="errors">Errors.</param>
        /// <param name="rateRequestId">RateRequestId.</param>
        /// <param name="shipmentId">ShipmentId.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="status">Status.</param>
        public RateResponse(List<Rate> rates = default(List<Rate>), List<Rate> invalidRates = default(List<Rate>),
            List<ProviderError> errors = default(List<ProviderError>), string rateRequestId = default(string),
            string shipmentId = default(string), DateTime? createdAt = default(DateTime?),
            StatusEnum? status = default(StatusEnum?))
        {
            Rates = rates;
            InvalidRates = invalidRates;
            Errors = errors;
            RateRequestId = rateRequestId;
            ShipmentId = shipmentId;
            CreatedAt = createdAt;
            Status = status;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        ///     Gets or Sets Rates
        /// </summary>
        [DataMember(Name = "rates", EmitDefaultValue = false)]
        public List<Rate> Rates { get; set; }

        /// <summary>
        ///     Gets or Sets InvalidRates
        /// </summary>
        [DataMember(Name = "invalid_rates", EmitDefaultValue = false)]
        public List<Rate> InvalidRates { get; set; }

        /// <summary>
        ///     Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<ProviderError> Errors { get; set; }

        /// <summary>
        ///     Gets or Sets RateRequestId
        /// </summary>
        [DataMember(Name = "rate_request_id", EmitDefaultValue = false)]
        public string RateRequestId { get; set; }

        /// <summary>
        ///     Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipment_id", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Returns true if RateResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    Rates == other.Rates ||
                    Rates != null &&
                    Rates.SequenceEqual(other.Rates)
                ) &&
                (
                    InvalidRates == other.InvalidRates ||
                    InvalidRates != null &&
                    InvalidRates.SequenceEqual(other.InvalidRates)
                ) &&
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) &&
                (
                    RateRequestId == other.RateRequestId ||
                    RateRequestId != null &&
                    RateRequestId.Equals(other.RateRequestId)
                ) &&
                (
                    ShipmentId == other.ShipmentId ||
                    ShipmentId != null &&
                    ShipmentId.Equals(other.ShipmentId)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RateResponse {\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  InvalidRates: ").Append(InvalidRates).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  RateRequestId: ").Append(RateRequestId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as RateResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Rates != null)
                {
                    hash = hash * 59 + Rates.GetHashCode();
                }
                if (InvalidRates != null)
                {
                    hash = hash * 59 + InvalidRates.GetHashCode();
                }
                if (Errors != null)
                {
                    hash = hash * 59 + Errors.GetHashCode();
                }
                if (RateRequestId != null)
                {
                    hash = hash * 59 + RateRequestId.GetHashCode();
                }
                if (ShipmentId != null)
                {
                    hash = hash * 59 + ShipmentId.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (Status != null)
                {
                    hash = hash * 59 + Status.GetHashCode();
                }
                return hash;
            }
        }
    }
}