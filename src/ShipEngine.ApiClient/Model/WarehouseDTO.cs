/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ShipEngine.ApiClient.Model
{
    /// <summary>
    ///     WarehouseDTO
    /// </summary>
    [DataContract]
    public class WarehouseDTO : IEquatable<WarehouseDTO>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="WarehouseDTO" /> class.
        /// </summary>
        /// <param name="warehouseId">WarehouseId.</param>
        /// <param name="name">Name.</param>
        /// <param name="createdAt">CreatedAt.</param>
        /// <param name="originAddress">OriginAddress.</param>
        /// <param name="returnAddress">ReturnAddress.</param>
        public WarehouseDTO(string warehouseId = default(string), string name = default(string),
            DateTime? createdAt = default(DateTime?), AddressDTO originAddress = default(AddressDTO),
            AddressDTO returnAddress = default(AddressDTO))
        {
            WarehouseId = warehouseId;
            Name = name;
            CreatedAt = createdAt;
            OriginAddress = originAddress;
            ReturnAddress = returnAddress;
        }

        /// <summary>
        ///     Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name = "warehouse_id", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets OriginAddress
        /// </summary>
        [DataMember(Name = "origin_address", EmitDefaultValue = false)]
        public AddressDTO OriginAddress { get; set; }

        /// <summary>
        ///     Gets or Sets ReturnAddress
        /// </summary>
        [DataMember(Name = "return_address", EmitDefaultValue = false)]
        public AddressDTO ReturnAddress { get; set; }

        /// <summary>
        ///     Returns true if WarehouseDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of WarehouseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WarehouseDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
            {
                return false;
            }

            return
                (
                    WarehouseId == other.WarehouseId ||
                    WarehouseId != null &&
                    WarehouseId.Equals(other.WarehouseId)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    Equals(OriginAddress, other.OriginAddress) ||
                    OriginAddress != null &&
                    OriginAddress.Equals(other.OriginAddress)
                ) &&
                (
                    Equals(ReturnAddress, other.ReturnAddress) ||
                    ReturnAddress != null &&
                    ReturnAddress.Equals(other.ReturnAddress)
                );
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WarehouseDTO {\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  OriginAddress: ").Append(OriginAddress).Append("\n");
            sb.Append("  ReturnAddress: ").Append(ReturnAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as WarehouseDTO);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (WarehouseId != null)
                {
                    hash = hash * 59 + WarehouseId.GetHashCode();
                }
                if (Name != null)
                {
                    hash = hash * 59 + Name.GetHashCode();
                }
                if (CreatedAt != null)
                {
                    hash = hash * 59 + CreatedAt.GetHashCode();
                }
                if (OriginAddress != null)
                {
                    hash = hash * 59 + OriginAddress.GetHashCode();
                }
                if (ReturnAddress != null)
                {
                    hash = hash * 59 + ReturnAddress.GetHashCode();
                }
                return hash;
            }
        }
    }
}