/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ShipmentAddTagResponse</returns>
        ShipmentAddTagResponse ShipmentsAddTag(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of ShipmentAddTagResponse</returns>
        ApiResponse<ShipmentAddTagResponse> ShipmentsAddTagWithHttpInfo(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        void ShipmentsCancel(string shipmentId, string apiKey);

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ShipmentsCancelWithHttpInfo(string shipmentId, string apiKey);

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CreateShipmentsResponse</returns>
        CreateShipmentsResponse ShipmentsCreateShipments(CreateShipmentsRequest shipmentsRequest, string apiKey);

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CreateShipmentsResponse</returns>
        ApiResponse<CreateShipmentsResponse> ShipmentsCreateShipmentsWithHttpInfo(
            CreateShipmentsRequest shipmentsRequest, string apiKey);

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Shipment</returns>
        Shipment ShipmentsGet(string shipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> ShipmentsGetWithHttpInfo(string shipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Shipment</returns>
        Shipment ShipmentsGetByExternalId(string externalShipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> ShipmentsGetByExternalIdWithHttpInfo(string externalShipmentId, string apiKey);

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>RateResponse</returns>
        RateResponse ShipmentsGetRatesForShipment(string shipmentId, string apiKey, DateTime? createdAtStart = null);

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>ApiResponse of RateResponse</returns>
        ApiResponse<RateResponse> ShipmentsGetRatesForShipmentWithHttpInfo(string shipmentId, string apiKey,
            DateTime? createdAtStart = null);

        /// <summary>
        ///     Get shipments
        /// </summary>
        /// <remarks>
        ///     Get a list of shipments using optional criteria
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ListShipmentResponse</returns>
        ListShipmentResponse ShipmentsList(string apiKey, string batchId = null, string tag = null,
            string shipmentStatus = null, DateTime? modifiedAtStart = null, DateTime? modifiedAtEnd = null,
            DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null, int? pageSize = null,
            string sortDir = null, string sortBy = null);

        /// <summary>
        ///     Get shipments
        /// </summary>
        /// <remarks>
        ///     Get a list of shipments using optional criteria
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ApiResponse of ListShipmentResponse</returns>
        ApiResponse<ListShipmentResponse> ShipmentsListWithHttpInfo(string apiKey, string batchId = null,
            string tag = null, string shipmentStatus = null, DateTime? modifiedAtStart = null,
            DateTime? modifiedAtEnd = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null);

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>ShipmentResponseErrors</returns>
        ShipmentResponseErrors ShipmentsListErrors(string shipmentId, string apiKey, int? page = null,
            int? pagesize = null);

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>ApiResponse of ShipmentResponseErrors</returns>
        ApiResponse<ShipmentResponseErrors> ShipmentsListErrorsWithHttpInfo(string shipmentId, string apiKey,
            int? page = null, int? pagesize = null);

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        void ShipmentsRemoveTag(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ShipmentsRemoveTagWithHttpInfo(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CreateShipmentResponse</returns>
        CreateShipmentResponse ShipmentsUpdateShipment(string shipmentId, AddressValidatingShipment shipment,
            string apiKey);

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CreateShipmentResponse</returns>
        ApiResponse<CreateShipmentResponse> ShipmentsUpdateShipmentWithHttpInfo(string shipmentId,
            AddressValidatingShipment shipment, string apiKey);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ShipmentAddTagResponse</returns>
        Task<ShipmentAddTagResponse> ShipmentsAddTagAsync(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (ShipmentAddTagResponse)</returns>
        Task<ApiResponse<ShipmentAddTagResponse>> ShipmentsAddTagAsyncWithHttpInfo(string shipmentId, string tag,
            string apiKey);

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        Task ShipmentsCancelAsync(string shipmentId, string apiKey);

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ShipmentsCancelAsyncWithHttpInfo(string shipmentId, string apiKey);

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CreateShipmentsResponse</returns>
        Task<CreateShipmentsResponse> ShipmentsCreateShipmentsAsync(CreateShipmentsRequest shipmentsRequest,
            string apiKey);

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CreateShipmentsResponse)</returns>
        Task<ApiResponse<CreateShipmentsResponse>> ShipmentsCreateShipmentsAsyncWithHttpInfo(
            CreateShipmentsRequest shipmentsRequest, string apiKey);

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Shipment</returns>
        Task<Shipment> ShipmentsGetAsync(string shipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        Task<ApiResponse<Shipment>> ShipmentsGetAsyncWithHttpInfo(string shipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Shipment</returns>
        Task<Shipment> ShipmentsGetByExternalIdAsync(string externalShipmentId, string apiKey);

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        Task<ApiResponse<Shipment>> ShipmentsGetByExternalIdAsyncWithHttpInfo(string externalShipmentId, string apiKey);

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>Task of RateResponse</returns>
        Task<RateResponse> ShipmentsGetRatesForShipmentAsync(string shipmentId, string apiKey,
            DateTime? createdAtStart = null);

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>Task of ApiResponse (RateResponse)</returns>
        Task<ApiResponse<RateResponse>> ShipmentsGetRatesForShipmentAsyncWithHttpInfo(string shipmentId, string apiKey,
            DateTime? createdAtStart = null);

        /// <summary>
        ///     Get shipments
        /// </summary>
        /// <remarks>
        ///     Get a list of shipments using optional criteria
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ListShipmentResponse</returns>
        Task<ListShipmentResponse> ShipmentsListAsync(string apiKey, string batchId = null, string tag = null,
            string shipmentStatus = null, DateTime? modifiedAtStart = null, DateTime? modifiedAtEnd = null,
            DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null, int? pageSize = null,
            string sortDir = null, string sortBy = null);

        /// <summary>
        ///     Get shipments
        /// </summary>
        /// <remarks>
        ///     Get a list of shipments using optional criteria
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentResponse)</returns>
        Task<ApiResponse<ListShipmentResponse>> ShipmentsListAsyncWithHttpInfo(string apiKey, string batchId = null,
            string tag = null, string shipmentStatus = null, DateTime? modifiedAtStart = null,
            DateTime? modifiedAtEnd = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null);

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of ShipmentResponseErrors</returns>
        Task<ShipmentResponseErrors> ShipmentsListErrorsAsync(string shipmentId, string apiKey, int? page = null,
            int? pagesize = null);

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of ApiResponse (ShipmentResponseErrors)</returns>
        Task<ApiResponse<ShipmentResponseErrors>> ShipmentsListErrorsAsyncWithHttpInfo(string shipmentId, string apiKey,
            int? page = null, int? pagesize = null);

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        Task ShipmentsRemoveTagAsync(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> ShipmentsRemoveTagAsyncWithHttpInfo(string shipmentId, string tag, string apiKey);

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CreateShipmentResponse</returns>
        Task<CreateShipmentResponse> ShipmentsUpdateShipmentAsync(string shipmentId, AddressValidatingShipment shipment,
            string apiKey);

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CreateShipmentResponse)</returns>
        Task<ApiResponse<CreateShipmentResponse>> ShipmentsUpdateShipmentAsyncWithHttpInfo(string shipmentId,
            AddressValidatingShipment shipment, string apiKey);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ShipmentsApi : IShipmentsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ShipmentsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentsApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ShipmentsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentsApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ShipmentAddTagResponse</returns>
        public ShipmentAddTagResponse ShipmentsAddTag(string shipmentId, string tag, string apiKey)
        {
            var localVarResponse = ShipmentsAddTagWithHttpInfo(shipmentId, tag, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of ShipmentAddTagResponse</returns>
        public ApiResponse<ShipmentAddTagResponse> ShipmentsAddTagWithHttpInfo(string shipmentId, string tag,
            string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsAddTag");
            }
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'tag' when calling ShipmentsApi->ShipmentsAddTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsAddTag");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsAddTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ShipmentAddTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentAddTagResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentAddTagResponse)));
        }

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ShipmentAddTagResponse</returns>
        public async Task<ShipmentAddTagResponse> ShipmentsAddTagAsync(string shipmentId, string tag, string apiKey)
        {
            var localVarResponse = await ShipmentsAddTagAsyncWithHttpInfo(shipmentId, tag, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add a tag to a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (ShipmentAddTagResponse)</returns>
        public async Task<ApiResponse<ShipmentAddTagResponse>> ShipmentsAddTagAsyncWithHttpInfo(string shipmentId,
            string tag, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsAddTag");
            }
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'tag' when calling ShipmentsApi->ShipmentsAddTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsAddTag");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsAddTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ShipmentAddTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentAddTagResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentAddTagResponse)));
        }

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void ShipmentsCancel(string shipmentId, string apiKey)
        {
            ShipmentsCancelWithHttpInfo(shipmentId, apiKey);
        }

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ShipmentsCancelWithHttpInfo(string shipmentId, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsCancel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsCancel");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsCancel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task ShipmentsCancelAsync(string shipmentId, string apiKey)
        {
            await ShipmentsCancelAsyncWithHttpInfo(shipmentId, apiKey);
        }

        /// <summary>
        ///     Cancel a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ShipmentsCancelAsyncWithHttpInfo(string shipmentId, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsCancel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsCancel");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsCancel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CreateShipmentsResponse</returns>
        public CreateShipmentsResponse ShipmentsCreateShipments(CreateShipmentsRequest shipmentsRequest, string apiKey)
        {
            var localVarResponse = ShipmentsCreateShipmentsWithHttpInfo(shipmentsRequest, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CreateShipmentsResponse</returns>
        public ApiResponse<CreateShipmentsResponse> ShipmentsCreateShipmentsWithHttpInfo(
            CreateShipmentsRequest shipmentsRequest, string apiKey)
        {
            // verify the required parameter 'shipmentsRequest' is set
            if (shipmentsRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentsRequest' when calling ShipmentsApi->ShipmentsCreateShipments");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsCreateShipments");
            }

            var localVarPath = "/v1/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (shipmentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipmentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipmentsRequest; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsCreateShipments", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreateShipmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentsResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentsResponse)));
        }

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CreateShipmentsResponse</returns>
        public async Task<CreateShipmentsResponse> ShipmentsCreateShipmentsAsync(
            CreateShipmentsRequest shipmentsRequest, string apiKey)
        {
            var localVarResponse = await ShipmentsCreateShipmentsAsyncWithHttpInfo(shipmentsRequest, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create multiple shipments
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentsRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CreateShipmentsResponse)</returns>
        public async Task<ApiResponse<CreateShipmentsResponse>> ShipmentsCreateShipmentsAsyncWithHttpInfo(
            CreateShipmentsRequest shipmentsRequest, string apiKey)
        {
            // verify the required parameter 'shipmentsRequest' is set
            if (shipmentsRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentsRequest' when calling ShipmentsApi->ShipmentsCreateShipments");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsCreateShipments");
            }

            var localVarPath = "/v1/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (shipmentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipmentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipmentsRequest; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsCreateShipments", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreateShipmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentsResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentsResponse)));
        }

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Shipment</returns>
        public Shipment ShipmentsGet(string shipmentId, string apiKey)
        {
            var localVarResponse = ShipmentsGetWithHttpInfo(shipmentId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ApiResponse<Shipment> ShipmentsGetWithHttpInfo(string shipmentId, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGet");
            }

            var localVarPath = "/v1/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Shipment</returns>
        public async Task<Shipment> ShipmentsGetAsync(string shipmentId, string apiKey)
        {
            var localVarResponse = await ShipmentsGetAsyncWithHttpInfo(shipmentId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async Task<ApiResponse<Shipment>> ShipmentsGetAsyncWithHttpInfo(string shipmentId, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGet");
            }

            var localVarPath = "/v1/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Shipment</returns>
        public Shipment ShipmentsGetByExternalId(string externalShipmentId, string apiKey)
        {
            var localVarResponse = ShipmentsGetByExternalIdWithHttpInfo(externalShipmentId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ApiResponse<Shipment> ShipmentsGetByExternalIdWithHttpInfo(string externalShipmentId, string apiKey)
        {
            // verify the required parameter 'externalShipmentId' is set
            if (externalShipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'externalShipmentId' when calling ShipmentsApi->ShipmentsGetByExternalId");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGetByExternalId");
            }

            var localVarPath = "/v1/shipments/external_shipment_id/{external_shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("external_shipment_id",
                Configuration.ApiClient.ParameterToString(externalShipmentId)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGetByExternalId", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Shipment</returns>
        public async Task<Shipment> ShipmentsGetByExternalIdAsync(string externalShipmentId, string apiKey)
        {
            var localVarResponse = await ShipmentsGetByExternalIdAsyncWithHttpInfo(externalShipmentId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific shipment by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalShipmentId">External Shipment Id</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async Task<ApiResponse<Shipment>> ShipmentsGetByExternalIdAsyncWithHttpInfo(string externalShipmentId,
            string apiKey)
        {
            // verify the required parameter 'externalShipmentId' is set
            if (externalShipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'externalShipmentId' when calling ShipmentsApi->ShipmentsGetByExternalId");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGetByExternalId");
            }

            var localVarPath = "/v1/shipments/external_shipment_id/{external_shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("external_shipment_id",
                Configuration.ApiClient.ParameterToString(externalShipmentId)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGetByExternalId", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
        }

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>RateResponse</returns>
        public RateResponse ShipmentsGetRatesForShipment(string shipmentId, string apiKey,
            DateTime? createdAtStart = null)
        {
            var localVarResponse = ShipmentsGetRatesForShipmentWithHttpInfo(shipmentId, apiKey, createdAtStart);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>ApiResponse of RateResponse</returns>
        public ApiResponse<RateResponse> ShipmentsGetRatesForShipmentWithHttpInfo(string shipmentId, string apiKey,
            DateTime? createdAtStart = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsGetRatesForShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGetRatesForShipment");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/rates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGetRatesForShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<RateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateResponse)));
        }

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>Task of RateResponse</returns>
        public async Task<RateResponse> ShipmentsGetRatesForShipmentAsync(string shipmentId, string apiKey,
            DateTime? createdAtStart = null)
        {
            var localVarResponse = await ShipmentsGetRatesForShipmentAsyncWithHttpInfo(shipmentId, apiKey,
                createdAtStart);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get rates for a specific shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="createdAtStart"> (optional)</param>
        /// <returns>Task of ApiResponse (RateResponse)</returns>
        public async Task<ApiResponse<RateResponse>> ShipmentsGetRatesForShipmentAsyncWithHttpInfo(string shipmentId,
            string apiKey, DateTime? createdAtStart = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsGetRatesForShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsGetRatesForShipment");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/rates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsGetRatesForShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<RateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateResponse)));
        }

        /// <summary>
        ///     Get shipments Get a list of shipments using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ListShipmentResponse</returns>
        public ListShipmentResponse ShipmentsList(string apiKey, string batchId = null, string tag = null,
            string shipmentStatus = null, DateTime? modifiedAtStart = null, DateTime? modifiedAtEnd = null,
            DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null, int? pageSize = null,
            string sortDir = null, string sortBy = null)
        {
            var localVarResponse = ShipmentsListWithHttpInfo(apiKey, batchId, tag, shipmentStatus, modifiedAtStart,
                modifiedAtEnd, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get shipments Get a list of shipments using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ApiResponse of ListShipmentResponse</returns>
        public ApiResponse<ListShipmentResponse> ShipmentsListWithHttpInfo(string apiKey, string batchId = null,
            string tag = null, string shipmentStatus = null, DateTime? modifiedAtStart = null,
            DateTime? modifiedAtEnd = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsList");
            }

            var localVarPath = "/v1/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (batchId != null)
            {
                localVarQueryParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
                    // query parameter
            }
            if (tag != null)
            {
                localVarQueryParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // query parameter
            }
            if (shipmentStatus != null)
            {
                localVarQueryParams.Add("shipment_status", Configuration.ApiClient.ParameterToString(shipmentStatus));
                    // query parameter
            }
            if (modifiedAtStart != null)
            {
                localVarQueryParams.Add("modified_at_start", Configuration.ApiClient.ParameterToString(modifiedAtStart));
                    // query parameter
            }
            if (modifiedAtEnd != null)
            {
                localVarQueryParams.Add("modified_at_end", Configuration.ApiClient.ParameterToString(modifiedAtEnd));
                    // query parameter
            }
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            if (createdAtEnd != null)
            {
                localVarQueryParams.Add("created_at_end", Configuration.ApiClient.ParameterToString(createdAtEnd));
                    // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            if (apiKey != null)
            {
                localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
                    // header parameter
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentResponse)));
        }

        /// <summary>
        ///     Get shipments Get a list of shipments using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ListShipmentResponse</returns>
        public async Task<ListShipmentResponse> ShipmentsListAsync(string apiKey, string batchId = null,
            string tag = null, string shipmentStatus = null, DateTime? modifiedAtStart = null,
            DateTime? modifiedAtEnd = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            var localVarResponse = await ShipmentsListAsyncWithHttpInfo(apiKey, batchId, tag, shipmentStatus,
                modifiedAtStart, modifiedAtEnd, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get shipments Get a list of shipments using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Retrieve shipments in the specified batch_id (optional)</param>
        /// <param name="tag">Retrieve shipments by associated tag (optional)</param>
        /// <param name="shipmentStatus">Shipment status (optional)</param>
        /// <param name="modifiedAtStart">Modify date range start (optional)</param>
        /// <param name="modifiedAtEnd">Modify date range end (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ApiResponse (ListShipmentResponse)</returns>
        public async Task<ApiResponse<ListShipmentResponse>> ShipmentsListAsyncWithHttpInfo(string apiKey,
            string batchId = null, string tag = null, string shipmentStatus = null, DateTime? modifiedAtStart = null,
            DateTime? modifiedAtEnd = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsList");
            }

            var localVarPath = "/v1/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (batchId != null)
            {
                localVarQueryParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
                    // query parameter
            }
            if (tag != null)
            {
                localVarQueryParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // query parameter
            }
            if (shipmentStatus != null)
            {
                localVarQueryParams.Add("shipment_status", Configuration.ApiClient.ParameterToString(shipmentStatus));
                    // query parameter
            }
            if (modifiedAtStart != null)
            {
                localVarQueryParams.Add("modified_at_start", Configuration.ApiClient.ParameterToString(modifiedAtStart));
                    // query parameter
            }
            if (modifiedAtEnd != null)
            {
                localVarQueryParams.Add("modified_at_end", Configuration.ApiClient.ParameterToString(modifiedAtEnd));
                    // query parameter
            }
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            if (createdAtEnd != null)
            {
                localVarQueryParams.Add("created_at_end", Configuration.ApiClient.ParameterToString(createdAtEnd));
                    // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            if (apiKey != null)
            {
                localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
                    // header parameter
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListShipmentResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListShipmentResponse)));
        }

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>ShipmentResponseErrors</returns>
        public ShipmentResponseErrors ShipmentsListErrors(string shipmentId, string apiKey, int? page = null,
            int? pagesize = null)
        {
            var localVarResponse = ShipmentsListErrorsWithHttpInfo(shipmentId, apiKey, page, pagesize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>ApiResponse of ShipmentResponseErrors</returns>
        public ApiResponse<ShipmentResponseErrors> ShipmentsListErrorsWithHttpInfo(string shipmentId, string apiKey,
            int? page = null, int? pagesize = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsListErrors");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsListErrors");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/errors";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pagesize != null)
            {
                localVarQueryParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsListErrors", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ShipmentResponseErrors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentResponseErrors)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentResponseErrors)));
        }

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of ShipmentResponseErrors</returns>
        public async Task<ShipmentResponseErrors> ShipmentsListErrorsAsync(string shipmentId, string apiKey,
            int? page = null, int? pagesize = null)
        {
            var localVarResponse = await ShipmentsListErrorsAsyncWithHttpInfo(shipmentId, apiKey, page, pagesize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Lists the errors.
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page">The page. (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of ApiResponse (ShipmentResponseErrors)</returns>
        public async Task<ApiResponse<ShipmentResponseErrors>> ShipmentsListErrorsAsyncWithHttpInfo(string shipmentId,
            string apiKey, int? page = null, int? pagesize = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsListErrors");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsListErrors");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/errors";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pagesize != null)
            {
                localVarQueryParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsListErrors", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ShipmentResponseErrors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipmentResponseErrors)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipmentResponseErrors)));
        }

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void ShipmentsRemoveTag(string shipmentId, string tag, string apiKey)
        {
            ShipmentsRemoveTagWithHttpInfo(shipmentId, tag, apiKey);
        }

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ShipmentsRemoveTagWithHttpInfo(string shipmentId, string tag, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsRemoveTag");
            }
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'tag' when calling ShipmentsApi->ShipmentsRemoveTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsRemoveTag");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsRemoveTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task ShipmentsRemoveTagAsync(string shipmentId, string tag, string apiKey)
        {
            await ShipmentsRemoveTagAsyncWithHttpInfo(shipmentId, tag, apiKey);
        }

        /// <summary>
        ///     Remove a tag from a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="tag">Tag</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ShipmentsRemoveTagAsyncWithHttpInfo(string shipmentId, string tag,
            string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsRemoveTag");
            }
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'tag' when calling ShipmentsApi->ShipmentsRemoveTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsRemoveTag");
            }

            var localVarPath = "/v1/shipments/{shipment_id}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsRemoveTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CreateShipmentResponse</returns>
        public CreateShipmentResponse ShipmentsUpdateShipment(string shipmentId, AddressValidatingShipment shipment,
            string apiKey)
        {
            var localVarResponse = ShipmentsUpdateShipmentWithHttpInfo(shipmentId, shipment, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CreateShipmentResponse</returns>
        public ApiResponse<CreateShipmentResponse> ShipmentsUpdateShipmentWithHttpInfo(string shipmentId,
            AddressValidatingShipment shipment, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }
            // verify the required parameter 'shipment' is set
            if (shipment == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipment' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }

            var localVarPath = "/v1/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsUpdateShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreateShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentResponse)));
        }

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CreateShipmentResponse</returns>
        public async Task<CreateShipmentResponse> ShipmentsUpdateShipmentAsync(string shipmentId,
            AddressValidatingShipment shipment, string apiKey)
        {
            var localVarResponse = await ShipmentsUpdateShipmentAsyncWithHttpInfo(shipmentId, shipment, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CreateShipmentResponse)</returns>
        public async Task<ApiResponse<CreateShipmentResponse>> ShipmentsUpdateShipmentAsyncWithHttpInfo(
            string shipmentId, AddressValidatingShipment shipment, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }
            // verify the required parameter 'shipment' is set
            if (shipment == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipment' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling ShipmentsApi->ShipmentsUpdateShipment");
            }

            var localVarPath = "/v1/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("ShipmentsUpdateShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreateShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentResponse)));
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}