/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CarriersApi : ICarriersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CarriersApi" /> class.
        /// </summary>
        /// <returns></returns>
        public CarriersApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CarriersApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CarriersApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Get a specific carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Carrier</returns>
        public Carrier CarriersGet(string carrierId, string apiKey)
        {
            var localVarResponse = CarriersGetWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Carrier</returns>
        public ApiResponse<Carrier> CarriersGetWithHttpInfo(string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling CarriersApi->CarriersGet");
            }

            var localVarPath = "/v1/carriers/{carrier_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Carrier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Carrier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Carrier)));
        }

        /// <summary>
        ///     Get a specific carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Carrier</returns>
        public async Task<Carrier> CarriersGetAsync(string carrierId, string apiKey)
        {
            var localVarResponse = await CarriersGetAsyncWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Carrier)</returns>
        public async Task<ApiResponse<Carrier>> CarriersGetAsyncWithHttpInfo(string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling CarriersApi->CarriersGet");
            }

            var localVarPath = "/v1/carriers/{carrier_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Carrier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Carrier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Carrier)));
        }

        /// <summary>
        ///     Get advanced options for a carrier Get advanced options (such as Saturday delivery, special handling, etc...) for a
        ///     carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CarrierListOptionsResponse</returns>
        public CarrierListOptionsResponse CarriersGetOptions(string carrierId, string apiKey)
        {
            var localVarResponse = CarriersGetOptionsWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get advanced options for a carrier Get advanced options (such as Saturday delivery, special handling, etc...) for a
        ///     carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CarrierListOptionsResponse</returns>
        public ApiResponse<CarrierListOptionsResponse> CarriersGetOptionsWithHttpInfo(string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersGetOptions");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersGetOptions");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/options";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersGetOptions", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListOptionsResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListOptionsResponse)));
        }

        /// <summary>
        ///     Get advanced options for a carrier Get advanced options (such as Saturday delivery, special handling, etc...) for a
        ///     carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CarrierListOptionsResponse</returns>
        public async Task<CarrierListOptionsResponse> CarriersGetOptionsAsync(string carrierId, string apiKey)
        {
            var localVarResponse = await CarriersGetOptionsAsyncWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get advanced options for a carrier Get advanced options (such as Saturday delivery, special handling, etc...) for a
        ///     carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CarrierListOptionsResponse)</returns>
        public async Task<ApiResponse<CarrierListOptionsResponse>> CarriersGetOptionsAsyncWithHttpInfo(string carrierId,
            string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersGetOptions");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersGetOptions");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/options";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersGetOptions", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListOptionsResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListOptionsResponse)));
        }

        /// <summary>
        ///     Get carriers Get a list of carriers (carrier accounts)
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>CarrierListResponse</returns>
        public CarrierListResponse CarriersList(string apiKey)
        {
            var localVarResponse = CarriersListWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get carriers Get a list of carriers (carrier accounts)
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CarrierListResponse</returns>
        public ApiResponse<CarrierListResponse> CarriersListWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling CarriersApi->CarriersList");
            }

            var localVarPath = "/v1/carriers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListResponse)));
        }

        /// <summary>
        ///     Get carriers Get a list of carriers (carrier accounts)
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CarrierListResponse</returns>
        public async Task<CarrierListResponse> CarriersListAsync(string apiKey)
        {
            var localVarResponse = await CarriersListAsyncWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get carriers Get a list of carriers (carrier accounts)
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CarrierListResponse)</returns>
        public async Task<ApiResponse<CarrierListResponse>> CarriersListAsyncWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling CarriersApi->CarriersList");
            }

            var localVarPath = "/v1/carriers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListResponse)));
        }

        /// <summary>
        ///     Get packages for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CarrierListPackagesResponse</returns>
        public CarrierListPackagesResponse CarriersListPackages(string carrierId, string apiKey)
        {
            var localVarResponse = CarriersListPackagesWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get packages for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CarrierListPackagesResponse</returns>
        public ApiResponse<CarrierListPackagesResponse> CarriersListPackagesWithHttpInfo(string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersListPackages");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersListPackages");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/packages";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersListPackages", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListPackagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListPackagesResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListPackagesResponse)));
        }

        /// <summary>
        ///     Get packages for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CarrierListPackagesResponse</returns>
        public async Task<CarrierListPackagesResponse> CarriersListPackagesAsync(string carrierId, string apiKey)
        {
            var localVarResponse = await CarriersListPackagesAsyncWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get packages for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CarrierListPackagesResponse)</returns>
        public async Task<ApiResponse<CarrierListPackagesResponse>> CarriersListPackagesAsyncWithHttpInfo(
            string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersListPackages");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersListPackages");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/packages";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersListPackages", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListPackagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListPackagesResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListPackagesResponse)));
        }

        /// <summary>
        ///     Get shipping services for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>CarrierListServicesResponse</returns>
        public CarrierListServicesResponse CarriersListServices(string carrierId, string apiKey)
        {
            var localVarResponse = CarriersListServicesWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get shipping services for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of CarrierListServicesResponse</returns>
        public ApiResponse<CarrierListServicesResponse> CarriersListServicesWithHttpInfo(string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersListServices");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersListServices");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/services";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersListServices", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListServicesResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListServicesResponse)));
        }

        /// <summary>
        ///     Get shipping services for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of CarrierListServicesResponse</returns>
        public async Task<CarrierListServicesResponse> CarriersListServicesAsync(string carrierId, string apiKey)
        {
            var localVarResponse = await CarriersListServicesAsyncWithHttpInfo(carrierId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get shipping services for a carrier
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (CarrierListServicesResponse)</returns>
        public async Task<ApiResponse<CarrierListServicesResponse>> CarriersListServicesAsyncWithHttpInfo(
            string carrierId, string apiKey)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'carrierId' when calling CarriersApi->CarriersListServices");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling CarriersApi->CarriersListServices");
            }

            var localVarPath = "/v1/carriers/{carrier_id}/services";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("CarriersListServices", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CarrierListServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CarrierListServicesResponse)
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierListServicesResponse)));
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}