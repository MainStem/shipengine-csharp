/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TagsApi : ITagsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TagsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TagsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Create a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void TagsAddTag(string tagName, string apiKey)
        {
            TagsAddTagWithHttpInfo(tagName, apiKey);
        }

        /// <summary>
        ///     Create a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> TagsAddTagWithHttpInfo(string tagName, string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsAddTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsAddTag");
            }

            var localVarPath = "/v1/tags/{tag_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsAddTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Create a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task TagsAddTagAsync(string tagName, string apiKey)
        {
            await TagsAddTagAsyncWithHttpInfo(tagName, apiKey);
        }

        /// <summary>
        ///     Create a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> TagsAddTagAsyncWithHttpInfo(string tagName, string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsAddTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsAddTag");
            }

            var localVarPath = "/v1/tags/{tag_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsAddTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Delete a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ListTagResponse</returns>
        public ListTagResponse TagsDelete(string tagName, string apiKey)
        {
            var localVarResponse = TagsDeleteWithHttpInfo(tagName, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of ListTagResponse</returns>
        public ApiResponse<ListTagResponse> TagsDeleteWithHttpInfo(string tagName, string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsDelete");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsDelete");
            }

            var localVarPath = "/v1/tags/{tag_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsDelete", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTagResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTagResponse)));
        }

        /// <summary>
        ///     Delete a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ListTagResponse</returns>
        public async Task<ListTagResponse> TagsDeleteAsync(string tagName, string apiKey)
        {
            var localVarResponse = await TagsDeleteAsyncWithHttpInfo(tagName, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (ListTagResponse)</returns>
        public async Task<ApiResponse<ListTagResponse>> TagsDeleteAsyncWithHttpInfo(string tagName, string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsDelete");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsDelete");
            }

            var localVarPath = "/v1/tags/{tag_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsDelete", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTagResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTagResponse)));
        }

        /// <summary>
        ///     Get tags Get all tags associated with your account
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>ListTagResponse</returns>
        public ListTagResponse TagsListTags(string apiKey)
        {
            var localVarResponse = TagsListTagsWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get tags Get all tags associated with your account
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of ListTagResponse</returns>
        public ApiResponse<ListTagResponse> TagsListTagsWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsListTags");
            }

            var localVarPath = "/v1/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsListTags", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTagResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTagResponse)));
        }

        /// <summary>
        ///     Get tags Get all tags associated with your account
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ListTagResponse</returns>
        public async Task<ListTagResponse> TagsListTagsAsync(string apiKey)
        {
            var localVarResponse = await TagsListTagsAsyncWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get tags Get all tags associated with your account
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (ListTagResponse)</returns>
        public async Task<ApiResponse<ListTagResponse>> TagsListTagsAsyncWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsListTags");
            }

            var localVarPath = "/v1/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsListTags", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTagResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTagResponse)));
        }

        /// <summary>
        ///     Rename a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">Current tag name</param>
        /// <param name="newName">New tag name</param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void TagsUpdateTag(string tagName, string newName, string apiKey)
        {
            TagsUpdateTagWithHttpInfo(tagName, newName, apiKey);
        }

        /// <summary>
        ///     Rename a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">Current tag name</param>
        /// <param name="newName">New tag name</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> TagsUpdateTagWithHttpInfo(string tagName, string newName, string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsUpdateTag");
            }
            // verify the required parameter 'newName' is set
            if (newName == null)
            {
                throw new ApiException(400, "Missing required parameter 'newName' when calling TagsApi->TagsUpdateTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsUpdateTag");
            }

            var localVarPath = "/v1/tags/{tag_name}/{new_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarPathParams.Add("new_name", Configuration.ApiClient.ParameterToString(newName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsUpdateTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Rename a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">Current tag name</param>
        /// <param name="newName">New tag name</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task TagsUpdateTagAsync(string tagName, string newName, string apiKey)
        {
            await TagsUpdateTagAsyncWithHttpInfo(tagName, newName, apiKey);
        }

        /// <summary>
        ///     Rename a tag
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagName">Current tag name</param>
        /// <param name="newName">New tag name</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> TagsUpdateTagAsyncWithHttpInfo(string tagName, string newName,
            string apiKey)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagName' when calling TagsApi->TagsUpdateTag");
            }
            // verify the required parameter 'newName' is set
            if (newName == null)
            {
                throw new ApiException(400, "Missing required parameter 'newName' when calling TagsApi->TagsUpdateTag");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TagsApi->TagsUpdateTag");
            }

            var localVarPath = "/v1/tags/{tag_name}/{new_name}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("tag_name", Configuration.ApiClient.ParameterToString(tagName));
            // path parameter
            localVarPathParams.Add("new_name", Configuration.ApiClient.ParameterToString(newName));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("TagsUpdateTag", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}