/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LabelsApi : ILabelsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="LabelsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public LabelsApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="LabelsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LabelsApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Get a specific Label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Label</returns>
        public Label LabelsGet(string labelId, string apiKey)
        {
            var localVarResponse = LabelsGetWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific Label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Label</returns>
        public ApiResponse<Label> LabelsGetWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400, "Missing required parameter 'labelId' when calling LabelsApi->LabelsGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsGet");
            }

            var localVarPath = "/v1/labels/{label_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Get a specific Label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Label</returns>
        public async Task<Label> LabelsGetAsync(string labelId, string apiKey)
        {
            var localVarResponse = await LabelsGetAsyncWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific Label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        public async Task<ApiResponse<Label>> LabelsGetAsyncWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400, "Missing required parameter 'labelId' when calling LabelsApi->LabelsGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsGet");
            }

            var localVarPath = "/v1/labels/{label_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Get labels Get a list of labels using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Batch ID (optional)</param>
        /// <param name="labelStatus"> (optional)</param>
        /// <param name="carrierId">Carrier ID (optional)</param>
        /// <param name="serviceCode"> (optional)</param>
        /// <param name="trackingNumber">Tracking Number (optional)</param>
        /// <param name="warehouseId">Warehouse ID (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ListLabelResponse</returns>
        public ListLabelResponse LabelsList(string apiKey, string batchId = null, string labelStatus = null,
            string carrierId = null, string serviceCode = null, string trackingNumber = null, string warehouseId = null,
            DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null, int? pageSize = null,
            string sortDir = null, string sortBy = null)
        {
            var localVarResponse = LabelsListWithHttpInfo(apiKey, batchId, labelStatus, carrierId, serviceCode,
                trackingNumber, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get labels Get a list of labels using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Batch ID (optional)</param>
        /// <param name="labelStatus"> (optional)</param>
        /// <param name="carrierId">Carrier ID (optional)</param>
        /// <param name="serviceCode"> (optional)</param>
        /// <param name="trackingNumber">Tracking Number (optional)</param>
        /// <param name="warehouseId">Warehouse ID (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>ApiResponse of ListLabelResponse</returns>
        public ApiResponse<ListLabelResponse> LabelsListWithHttpInfo(string apiKey, string batchId = null,
            string labelStatus = null, string carrierId = null, string serviceCode = null, string trackingNumber = null,
            string warehouseId = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null,
            int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsList");
            }

            var localVarPath = "/v1/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (batchId != null)
            {
                localVarQueryParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
                    // query parameter
            }
            if (labelStatus != null)
            {
                localVarQueryParams.Add("label_status", Configuration.ApiClient.ParameterToString(labelStatus));
                    // query parameter
            }
            if (carrierId != null)
            {
                localVarQueryParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
                    // query parameter
            }
            if (serviceCode != null)
            {
                localVarQueryParams.Add("service_code", Configuration.ApiClient.ParameterToString(serviceCode));
                    // query parameter
            }
            if (trackingNumber != null)
            {
                localVarQueryParams.Add("tracking_number", Configuration.ApiClient.ParameterToString(trackingNumber));
                    // query parameter
            }
            if (warehouseId != null)
            {
                localVarQueryParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
                    // query parameter
            }
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            if (createdAtEnd != null)
            {
                localVarQueryParams.Add("created_at_end", Configuration.ApiClient.ParameterToString(createdAtEnd));
                    // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            if (apiKey != null)
            {
                localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
                    // header parameter
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListLabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListLabelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListLabelResponse)));
        }

        /// <summary>
        ///     Get labels Get a list of labels using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Batch ID (optional)</param>
        /// <param name="labelStatus"> (optional)</param>
        /// <param name="carrierId">Carrier ID (optional)</param>
        /// <param name="serviceCode"> (optional)</param>
        /// <param name="trackingNumber">Tracking Number (optional)</param>
        /// <param name="warehouseId">Warehouse ID (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ListLabelResponse</returns>
        public async Task<ListLabelResponse> LabelsListAsync(string apiKey, string batchId = null,
            string labelStatus = null, string carrierId = null, string serviceCode = null, string trackingNumber = null,
            string warehouseId = null, DateTime? createdAtStart = null, DateTime? createdAtEnd = null, int? page = null,
            int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            var localVarResponse = await LabelsListAsyncWithHttpInfo(apiKey, batchId, labelStatus, carrierId,
                serviceCode, trackingNumber, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get labels Get a list of labels using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="batchId">Batch ID (optional)</param>
        /// <param name="labelStatus"> (optional)</param>
        /// <param name="carrierId">Carrier ID (optional)</param>
        /// <param name="serviceCode"> (optional)</param>
        /// <param name="trackingNumber">Tracking Number (optional)</param>
        /// <param name="warehouseId">Warehouse ID (optional)</param>
        /// <param name="createdAtStart">Create date range start (optional)</param>
        /// <param name="createdAtEnd">Create date range end (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Number of records per page (optional)</param>
        /// <param name="sortDir">Sort direction (optional)</param>
        /// <param name="sortBy">Sort by item (optional)</param>
        /// <returns>Task of ApiResponse (ListLabelResponse)</returns>
        public async Task<ApiResponse<ListLabelResponse>> LabelsListAsyncWithHttpInfo(string apiKey,
            string batchId = null, string labelStatus = null, string carrierId = null, string serviceCode = null,
            string trackingNumber = null, string warehouseId = null, DateTime? createdAtStart = null,
            DateTime? createdAtEnd = null, int? page = null, int? pageSize = null, string sortDir = null,
            string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsList");
            }

            var localVarPath = "/v1/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (batchId != null)
            {
                localVarQueryParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
                    // query parameter
            }
            if (labelStatus != null)
            {
                localVarQueryParams.Add("label_status", Configuration.ApiClient.ParameterToString(labelStatus));
                    // query parameter
            }
            if (carrierId != null)
            {
                localVarQueryParams.Add("carrier_id", Configuration.ApiClient.ParameterToString(carrierId));
                    // query parameter
            }
            if (serviceCode != null)
            {
                localVarQueryParams.Add("service_code", Configuration.ApiClient.ParameterToString(serviceCode));
                    // query parameter
            }
            if (trackingNumber != null)
            {
                localVarQueryParams.Add("tracking_number", Configuration.ApiClient.ParameterToString(trackingNumber));
                    // query parameter
            }
            if (warehouseId != null)
            {
                localVarQueryParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
                    // query parameter
            }
            if (createdAtStart != null)
            {
                localVarQueryParams.Add("created_at_start", Configuration.ApiClient.ParameterToString(createdAtStart));
                    // query parameter
            }
            if (createdAtEnd != null)
            {
                localVarQueryParams.Add("created_at_end", Configuration.ApiClient.ParameterToString(createdAtEnd));
                    // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            if (apiKey != null)
            {
                localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
                    // header parameter
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListLabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListLabelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListLabelResponse)));
        }

        /// <summary>
        ///     Purchase a label by providing full shipment info
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Label</returns>
        public Label LabelsPurchaseLabel(PurchaseLabelRequest request, string apiKey)
        {
            var localVarResponse = LabelsPurchaseLabelWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label by providing full shipment info
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Label</returns>
        public ApiResponse<Label> LabelsPurchaseLabelWithHttpInfo(PurchaseLabelRequest request, string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabel");
            }

            var localVarPath = "/v1/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Purchase a label by providing full shipment info
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Label</returns>
        public async Task<Label> LabelsPurchaseLabelAsync(PurchaseLabelRequest request, string apiKey)
        {
            var localVarResponse = await LabelsPurchaseLabelAsyncWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label by providing full shipment info
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        public async Task<ApiResponse<Label>> LabelsPurchaseLabelAsyncWithHttpInfo(PurchaseLabelRequest request,
            string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabel");
            }

            var localVarPath = "/v1/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Purchase a label using a rate
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Label</returns>
        public Label LabelsPurchaseLabelWithRate(string rateId, PurchaseLabelWithoutShipmentRequest request,
            string apiKey)
        {
            var localVarResponse = LabelsPurchaseLabelWithRateWithHttpInfo(rateId, request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label using a rate
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Label</returns>
        public ApiResponse<Label> LabelsPurchaseLabelWithRateWithHttpInfo(string rateId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            // verify the required parameter 'rateId' is set
            if (rateId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'rateId' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }

            var localVarPath = "/v1/labels/rates/{rate_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("rate_id", Configuration.ApiClient.ParameterToString(rateId)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabelWithRate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Purchase a label using a rate
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Label</returns>
        public async Task<Label> LabelsPurchaseLabelWithRateAsync(string rateId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            var localVarResponse = await LabelsPurchaseLabelWithRateAsyncWithHttpInfo(rateId, request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label using a rate
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        public async Task<ApiResponse<Label>> LabelsPurchaseLabelWithRateAsyncWithHttpInfo(string rateId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            // verify the required parameter 'rateId' is set
            if (rateId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'rateId' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabelWithRate");
            }

            var localVarPath = "/v1/labels/rates/{rate_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("rate_id", Configuration.ApiClient.ParameterToString(rateId)); // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabelWithRate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Purchase a label using an existing shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Label</returns>
        public Label LabelsPurchaseLabelWithShipment(string shipmentId, PurchaseLabelWithoutShipmentRequest request,
            string apiKey)
        {
            var localVarResponse = LabelsPurchaseLabelWithShipmentWithHttpInfo(shipmentId, request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label using an existing shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Label</returns>
        public ApiResponse<Label> LabelsPurchaseLabelWithShipmentWithHttpInfo(string shipmentId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }

            var localVarPath = "/v1/labels/shipment/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabelWithShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Purchase a label using an existing shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Label</returns>
        public async Task<Label> LabelsPurchaseLabelWithShipmentAsync(string shipmentId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            var localVarResponse = await LabelsPurchaseLabelWithShipmentAsyncWithHttpInfo(shipmentId, request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Purchase a label using an existing shipment
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        public async Task<ApiResponse<Label>> LabelsPurchaseLabelWithShipmentAsyncWithHttpInfo(string shipmentId,
            PurchaseLabelWithoutShipmentRequest request, string apiKey)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'shipmentId' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsPurchaseLabelWithShipment");
            }

            var localVarPath = "/v1/labels/shipment/{shipment_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsPurchaseLabelWithShipment", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Label)));
        }

        /// <summary>
        ///     Get tracking information for a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>TrackingInformation</returns>
        public TrackingInformation LabelsTrack(string labelId, string apiKey)
        {
            var localVarResponse = LabelsTrackWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get tracking information for a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of TrackingInformation</returns>
        public ApiResponse<TrackingInformation> LabelsTrackWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400, "Missing required parameter 'labelId' when calling LabelsApi->LabelsTrack");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsTrack");
            }

            var localVarPath = "/v1/labels/{label_id}/track";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsTrack", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TrackingInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackingInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackingInformation)));
        }

        /// <summary>
        ///     Get tracking information for a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of TrackingInformation</returns>
        public async Task<TrackingInformation> LabelsTrackAsync(string labelId, string apiKey)
        {
            var localVarResponse = await LabelsTrackAsyncWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get tracking information for a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (TrackingInformation)</returns>
        public async Task<ApiResponse<TrackingInformation>> LabelsTrackAsyncWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400, "Missing required parameter 'labelId' when calling LabelsApi->LabelsTrack");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling LabelsApi->LabelsTrack");
            }

            var localVarPath = "/v1/labels/{label_id}/track";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsTrack", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TrackingInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackingInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackingInformation)));
        }

        /// <summary>
        ///     Void a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>VoidLabelResponse</returns>
        public VoidLabelResponse LabelsVoidLabel(string labelId, string apiKey)
        {
            var localVarResponse = LabelsVoidLabelWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Void a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of VoidLabelResponse</returns>
        public ApiResponse<VoidLabelResponse> LabelsVoidLabelWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'labelId' when calling LabelsApi->LabelsVoidLabel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsVoidLabel");
            }

            var localVarPath = "/v1/labels/{label_id}/void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsVoidLabel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<VoidLabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoidLabelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidLabelResponse)));
        }

        /// <summary>
        ///     Void a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of VoidLabelResponse</returns>
        public async Task<VoidLabelResponse> LabelsVoidLabelAsync(string labelId, string apiKey)
        {
            var localVarResponse = await LabelsVoidLabelAsyncWithHttpInfo(labelId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Void a label
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">Label ID</param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (VoidLabelResponse)</returns>
        public async Task<ApiResponse<VoidLabelResponse>> LabelsVoidLabelAsyncWithHttpInfo(string labelId, string apiKey)
        {
            // verify the required parameter 'labelId' is set
            if (labelId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'labelId' when calling LabelsApi->LabelsVoidLabel");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling LabelsApi->LabelsVoidLabel");
            }

            var localVarPath = "/v1/labels/{label_id}/void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("label_id", Configuration.ApiClient.ParameterToString(labelId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("LabelsVoidLabel", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<VoidLabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoidLabelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidLabelResponse)));
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}