/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BatchesApi : IBatchesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="BatchesApi" /> class.
        /// </summary>
        /// <returns></returns>
        public BatchesApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BatchesApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchesApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Add a shipment to a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void BatchesAddToBatch(string batchId, ModifyBatchRequest request, string apiKey)
        {
            BatchesAddToBatchWithHttpInfo(batchId, request, apiKey);
        }

        /// <summary>
        ///     Add a shipment to a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> BatchesAddToBatchWithHttpInfo(string batchId, ModifyBatchRequest request,
            string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesAddToBatch");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesAddToBatch");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesAddToBatch");
            }

            var localVarPath = "/v1/batches/{batch_id}/add";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesAddToBatch", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Add a shipment to a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task BatchesAddToBatchAsync(string batchId, ModifyBatchRequest request, string apiKey)
        {
            await BatchesAddToBatchAsyncWithHttpInfo(batchId, request, apiKey);
        }

        /// <summary>
        ///     Add a shipment to a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> BatchesAddToBatchAsyncWithHttpInfo(string batchId,
            ModifyBatchRequest request, string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesAddToBatch");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesAddToBatch");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesAddToBatch");
            }

            var localVarPath = "/v1/batches/{batch_id}/add";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesAddToBatch", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Create a batch Create a batch of shipments to rate and purchase labels in bulk
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Batch</returns>
        public Batch BatchesCreate(CreateBatchRequest request, string apiKey)
        {
            var localVarResponse = BatchesCreateWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a batch Create a batch of shipments to rate and purchase labels in bulk
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Batch</returns>
        public ApiResponse<Batch> BatchesCreateWithHttpInfo(CreateBatchRequest request, string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesCreate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesCreate");
            }

            var localVarPath = "/v1/batches";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesCreate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Batch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Batch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Batch)));
        }

        /// <summary>
        ///     Create a batch Create a batch of shipments to rate and purchase labels in bulk
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Batch</returns>
        public async Task<Batch> BatchesCreateAsync(CreateBatchRequest request, string apiKey)
        {
            var localVarResponse = await BatchesCreateAsyncWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a batch Create a batch of shipments to rate and purchase labels in bulk
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Batch)</returns>
        public async Task<ApiResponse<Batch>> BatchesCreateAsyncWithHttpInfo(CreateBatchRequest request, string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesCreate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesCreate");
            }

            var localVarPath = "/v1/batches";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesCreate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Batch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Batch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Batch)));
        }

        /// <summary>
        ///     Get a specific batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Batch</returns>
        public Batch BatchesGet(string batchId, string apiKey)
        {
            var localVarResponse = BatchesGetWithHttpInfo(batchId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Batch</returns>
        public ApiResponse<Batch> BatchesGetWithHttpInfo(string batchId, string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400, "Missing required parameter 'batchId' when calling BatchesApi->BatchesGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesGet");
            }

            var localVarPath = "/v1/batches/{batch_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Batch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Batch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Batch)));
        }

        /// <summary>
        ///     Get a specific batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of Batch</returns>
        public async Task<Batch> BatchesGetAsync(string batchId, string apiKey)
        {
            var localVarResponse = await BatchesGetAsyncWithHttpInfo(batchId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (Batch)</returns>
        public async Task<ApiResponse<Batch>> BatchesGetAsyncWithHttpInfo(string batchId, string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400, "Missing required parameter 'batchId' when calling BatchesApi->BatchesGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesGet");
            }

            var localVarPath = "/v1/batches/{batch_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Batch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Batch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Batch)));
        }

        /// <summary>
        ///     Get a specific batch by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalBatchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void BatchesGetByExternalId(string externalBatchId, string apiKey)
        {
            BatchesGetByExternalIdWithHttpInfo(externalBatchId, apiKey);
        }

        /// <summary>
        ///     Get a specific batch by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalBatchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> BatchesGetByExternalIdWithHttpInfo(string externalBatchId, string apiKey)
        {
            // verify the required parameter 'externalBatchId' is set
            if (externalBatchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'externalBatchId' when calling BatchesApi->BatchesGetByExternalId");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesGetByExternalId");
            }

            var localVarPath = "/v1/batches/external_batch_id/{external_batch_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("external_batch_id", Configuration.ApiClient.ParameterToString(externalBatchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesGetByExternalId", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Get a specific batch by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalBatchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task BatchesGetByExternalIdAsync(string externalBatchId, string apiKey)
        {
            await BatchesGetByExternalIdAsyncWithHttpInfo(externalBatchId, apiKey);
        }

        /// <summary>
        ///     Get a specific batch by an external id
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalBatchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> BatchesGetByExternalIdAsyncWithHttpInfo(string externalBatchId,
            string apiKey)
        {
            // verify the required parameter 'externalBatchId' is set
            if (externalBatchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'externalBatchId' when calling BatchesApi->BatchesGetByExternalId");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesGetByExternalId");
            }

            var localVarPath = "/v1/batches/external_batch_id/{external_batch_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("external_batch_id", Configuration.ApiClient.ParameterToString(externalBatchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesGetByExternalId", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Get batches Get a list of batches using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="page">Page number - Default: 1 (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortDir"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ListBatchResponse</returns>
        public ListBatchResponse BatchesList(string apiKey, string status = null, int? page = null, int? pageSize = null,
            string sortDir = null, string sortBy = null)
        {
            var localVarResponse = BatchesListWithHttpInfo(apiKey, status, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get batches Get a list of batches using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="page">Page number - Default: 1 (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortDir"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of ListBatchResponse</returns>
        public ApiResponse<ListBatchResponse> BatchesListWithHttpInfo(string apiKey, string status = null,
            int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesList");
            }

            var localVarPath = "/v1/batches";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListBatchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBatchResponse)));
        }

        /// <summary>
        ///     Get batches Get a list of batches using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="page">Page number - Default: 1 (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortDir"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>Task of ListBatchResponse</returns>
        public async Task<ListBatchResponse> BatchesListAsync(string apiKey, string status = null, int? page = null,
            int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            var localVarResponse = await BatchesListAsyncWithHttpInfo(apiKey, status, page, pageSize, sortDir, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get batches Get a list of batches using optional criteria
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="page">Page number - Default: 1 (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortDir"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>Task of ApiResponse (ListBatchResponse)</returns>
        public async Task<ApiResponse<ListBatchResponse>> BatchesListAsyncWithHttpInfo(string apiKey,
            string status = null, int? page = null, int? pageSize = null, string sortDir = null, string sortBy = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling BatchesApi->BatchesList");
            }

            var localVarPath = "/v1/batches";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pageSize != null)
            {
                localVarQueryParams.Add("page_size", Configuration.ApiClient.ParameterToString(pageSize));
                    // query parameter
            }
            if (sortDir != null)
            {
                localVarQueryParams.Add("sort_dir", Configuration.ApiClient.ParameterToString(sortDir));
                    // query parameter
            }
            if (sortBy != null)
            {
                localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ListBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListBatchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBatchResponse)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>BatchResponseErrors</returns>
        public BatchResponseErrors BatchesListErrors(string batchId, string apiKey, int? page = null,
            int? pagesize = null)
        {
            var localVarResponse = BatchesListErrorsWithHttpInfo(batchId, apiKey, page, pagesize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>ApiResponse of BatchResponseErrors</returns>
        public ApiResponse<BatchResponseErrors> BatchesListErrorsWithHttpInfo(string batchId, string apiKey,
            int? page = null, int? pagesize = null)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesListErrors");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesListErrors");
            }

            var localVarPath = "/v1/batches/{batch_id}/errors";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pagesize != null)
            {
                localVarQueryParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesListErrors", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BatchResponseErrors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchResponseErrors) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchResponseErrors)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of BatchResponseErrors</returns>
        public async Task<BatchResponseErrors> BatchesListErrorsAsync(string batchId, string apiKey, int? page = null,
            int? pagesize = null)
        {
            var localVarResponse = await BatchesListErrorsAsyncWithHttpInfo(batchId, apiKey, page, pagesize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="apiKey">API Key</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pagesize"> (optional)</param>
        /// <returns>Task of ApiResponse (BatchResponseErrors)</returns>
        public async Task<ApiResponse<BatchResponseErrors>> BatchesListErrorsAsyncWithHttpInfo(string batchId,
            string apiKey, int? page = null, int? pagesize = null)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesListErrors");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesListErrors");
            }

            var localVarPath = "/v1/batches/{batch_id}/errors";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            if (page != null)
            {
                localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            }
            if (pagesize != null)
            {
                localVarQueryParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize));
                    // query parameter
            }
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesListErrors", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BatchResponseErrors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchResponseErrors) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchResponseErrors)));
        }

        /// <summary>
        ///     Process a batch Generates labels for a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="processBatchRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void BatchesProcess(string batchId, ProcessBatchRequest processBatchRequest, string apiKey)
        {
            BatchesProcessWithHttpInfo(batchId, processBatchRequest, apiKey);
        }

        /// <summary>
        ///     Process a batch Generates labels for a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="processBatchRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> BatchesProcessWithHttpInfo(string batchId, ProcessBatchRequest processBatchRequest,
            string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesProcess");
            }
            // verify the required parameter 'processBatchRequest' is set
            if (processBatchRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'processBatchRequest' when calling BatchesApi->BatchesProcess");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesProcess");
            }

            var localVarPath = "/v1/batches/{batch_id}/process/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (processBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processBatchRequest);
                    // http body (model) parameter
            }
            else
            {
                localVarPostBody = processBatchRequest; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesProcess", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Process a batch Generates labels for a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="processBatchRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task BatchesProcessAsync(string batchId, ProcessBatchRequest processBatchRequest, string apiKey)
        {
            await BatchesProcessAsyncWithHttpInfo(batchId, processBatchRequest, apiKey);
        }

        /// <summary>
        ///     Process a batch Generates labels for a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="processBatchRequest"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> BatchesProcessAsyncWithHttpInfo(string batchId,
            ProcessBatchRequest processBatchRequest, string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesProcess");
            }
            // verify the required parameter 'processBatchRequest' is set
            if (processBatchRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'processBatchRequest' when calling BatchesApi->BatchesProcess");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesProcess");
            }

            var localVarPath = "/v1/batches/{batch_id}/process/labels";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (processBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processBatchRequest);
                    // http body (model) parameter
            }
            else
            {
                localVarPostBody = processBatchRequest; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesProcess", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Remove a shipment from a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void BatchesRemoveFromBatch(string batchId, ModifyBatchRequest request, string apiKey)
        {
            BatchesRemoveFromBatchWithHttpInfo(batchId, request, apiKey);
        }

        /// <summary>
        ///     Remove a shipment from a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> BatchesRemoveFromBatchWithHttpInfo(string batchId, ModifyBatchRequest request,
            string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesRemoveFromBatch");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesRemoveFromBatch");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesRemoveFromBatch");
            }

            var localVarPath = "/v1/batches/{batch_id}/remove";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesRemoveFromBatch", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Remove a shipment from a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task BatchesRemoveFromBatchAsync(string batchId, ModifyBatchRequest request, string apiKey)
        {
            await BatchesRemoveFromBatchAsyncWithHttpInfo(batchId, request, apiKey);
        }

        /// <summary>
        ///     Remove a shipment from a batch
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> BatchesRemoveFromBatchAsyncWithHttpInfo(string batchId,
            ModifyBatchRequest request, string apiKey)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'batchId' when calling BatchesApi->BatchesRemoveFromBatch");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling BatchesApi->BatchesRemoveFromBatch");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling BatchesApi->BatchesRemoveFromBatch");
            }

            var localVarPath = "/v1/batches/{batch_id}/remove";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("batch_id", Configuration.ApiClient.ParameterToString(batchId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("BatchesRemoveFromBatch", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}