/* 
 * ShipEngine
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using ShipEngine.ApiClient.Api.Interfaces;
using ShipEngine.ApiClient.Client;
using ShipEngine.ApiClient.Model;

namespace ShipEngine.ApiClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WarehousesApi : IWarehousesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="WarehousesApi" /> class.
        /// </summary>
        /// <returns></returns>
        public WarehousesApi(string basePath)
        {
            Configuration = new Configuration(new Client.ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="WarehousesApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehousesApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///     Create a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>WarehouseDTO</returns>
        public WarehouseDTO WarehousesCreate(WarehouseRequest request, string apiKey)
        {
            var localVarResponse = WarehousesCreateWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of WarehouseDTO</returns>
        public ApiResponse<WarehouseDTO> WarehousesCreateWithHttpInfo(WarehouseRequest request, string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling WarehousesApi->WarehousesCreate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesCreate");
            }

            var localVarPath = "/v1/warehouses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesCreate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDTO)));
        }

        /// <summary>
        ///     Create a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of WarehouseDTO</returns>
        public async Task<WarehouseDTO> WarehousesCreateAsync(WarehouseRequest request, string apiKey)
        {
            var localVarResponse = await WarehousesCreateAsyncWithHttpInfo(request, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (WarehouseDTO)</returns>
        public async Task<ApiResponse<WarehouseDTO>> WarehousesCreateAsyncWithHttpInfo(WarehouseRequest request,
            string apiKey)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling WarehousesApi->WarehousesCreate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesCreate");
            }

            var localVarPath = "/v1/warehouses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesCreate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDTO)));
        }

        /// <summary>
        ///     Delete a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void WarehousesDelete(string warehouseId, string apiKey)
        {
            WarehousesDeleteWithHttpInfo(warehouseId, apiKey);
        }

        /// <summary>
        ///     Delete a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> WarehousesDeleteWithHttpInfo(string warehouseId, string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesDelete");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesDelete");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesDelete", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Delete a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task WarehousesDeleteAsync(string warehouseId, string apiKey)
        {
            await WarehousesDeleteAsyncWithHttpInfo(warehouseId, apiKey);
        }

        /// <summary>
        ///     Delete a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> WarehousesDeleteAsyncWithHttpInfo(string warehouseId, string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesDelete");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesDelete");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesDelete", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Get a specific warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>WarehouseDTO</returns>
        public WarehouseDTO WarehousesGet(string warehouseId, string apiKey)
        {
            var localVarResponse = WarehousesGetWithHttpInfo(warehouseId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of WarehouseDTO</returns>
        public ApiResponse<WarehouseDTO> WarehousesGetWithHttpInfo(string warehouseId, string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesGet");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDTO)));
        }

        /// <summary>
        ///     Get a specific warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of WarehouseDTO</returns>
        public async Task<WarehouseDTO> WarehousesGetAsync(string warehouseId, string apiKey)
        {
            var localVarResponse = await WarehousesGetAsyncWithHttpInfo(warehouseId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a specific warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (WarehouseDTO)</returns>
        public async Task<ApiResponse<WarehouseDTO>> WarehousesGetAsyncWithHttpInfo(string warehouseId, string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesGet");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesGet");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesGet", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDTO)));
        }

        /// <summary>
        ///     Get warehouses Get a list of Warehouses
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>WarehouseListDTO</returns>
        public WarehouseListDTO WarehousesList(string apiKey)
        {
            var localVarResponse = WarehousesListWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get warehouses Get a list of Warehouses
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of WarehouseListDTO</returns>
        public ApiResponse<WarehouseListDTO> WarehousesListWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesList");
            }

            var localVarPath = "/v1/warehouses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseListDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseListDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseListDTO)));
        }

        /// <summary>
        ///     Get warehouses Get a list of Warehouses
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of WarehouseListDTO</returns>
        public async Task<WarehouseListDTO> WarehousesListAsync(string apiKey)
        {
            var localVarResponse = await WarehousesListAsyncWithHttpInfo(apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get warehouses Get a list of Warehouses
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse (WarehouseListDTO)</returns>
        public async Task<ApiResponse<WarehouseListDTO>> WarehousesListAsyncWithHttpInfo(string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesList");
            }

            var localVarPath = "/v1/warehouses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesList", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<WarehouseListDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseListDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseListDTO)));
        }

        /// <summary>
        ///     Update a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns></returns>
        public void WarehousesUpdate(string warehouseId, WarehouseRequest request, string apiKey)
        {
            WarehousesUpdateWithHttpInfo(warehouseId, request, apiKey);
        }

        /// <summary>
        ///     Update a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> WarehousesUpdateWithHttpInfo(string warehouseId, WarehouseRequest request,
            string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesUpdate");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling WarehousesApi->WarehousesUpdate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesUpdate");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesUpdate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Update a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of void</returns>
        public async Task WarehousesUpdateAsync(string warehouseId, WarehouseRequest request, string apiKey)
        {
            await WarehousesUpdateAsyncWithHttpInfo(warehouseId, request, apiKey);
        }

        /// <summary>
        ///     Update a warehouse
        /// </summary>
        /// <exception cref="ShipEngine.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="request"></param>
        /// <param name="apiKey">API Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> WarehousesUpdateAsyncWithHttpInfo(string warehouseId,
            WarehouseRequest request, string apiKey)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'warehouseId' when calling WarehousesApi->WarehousesUpdate");
            }
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'request' when calling WarehousesApi->WarehousesUpdate");
            }
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'apiKey' when calling WarehousesApi->WarehousesUpdate");
            }

            var localVarPath = "/v1/warehouses/{warehouse_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            localVarPathParams.Add("warehouse_id", Configuration.ApiClient.ParameterToString(warehouseId));
            // path parameter
            localVarHeaderParams.Add("api-key", Configuration.ApiClient.ParameterToString(apiKey));
            // header parameter
            if (request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            var exception = ExceptionFactory?.Invoke("WarehousesUpdate", localVarResponse);
            if (exception != null)
            {
                throw exception;
            }


            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
        )]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}